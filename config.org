#+TITLE: Emacs Doom Config
#+AUTHOR: Daniel Berio
#+EMAIL: drand48@gmail.com
#+PROPERTY: header-args :emacs-lisp :tangle yes :cache yes :results silent :comments link :exports code

To execute all and update use ~C-c C-v b~ or ~C-c C-v C-b~ or ~M-x
org-babel-execute-buffer~
Or ~M-x doom/reload~

**NB.** For a literate config to work you need to set the ~literate~ flag in ~init.el~

Doom keybindings ref:
- https://github.com/hlissner/doom-emacs/blob/develop/modules/config/default/+evil-bindings.el

** Configuration rabbithole links
- [[https://tecosaur.github.io/emacs-config/config.html][Techosaur: Very long nice config]]
- https://github.com/hjertnes/emacs.d/blob/master/hjertnes.org
- https://blog.sumtypeofway.com/posts/emacs-config.html

*** Install on Ubuntu
Note that Ubuntu needs "modules" support, best way to install seems to follow these instructions:
- [[http://ubuntuhandbook.org/index.php/2019/02/install-gnu-emacs-26-1-ubuntu-18-04-16-04-18-10][Link]]

#+begin_example
sudo add-apt-repository ppa:kelleyk/emacs
sudo apt update
sudo apt install emacs26
#+end_example

** General
Place your private configuration here! Remember, you do not need to run 'doom
sync' after modifying this file!

Some functionality uses this to identify you, e.g. GPG configuration, email
clients, file templates and snippets.

#+begin_src emacs-lisp
(setq user-full-name "Daniel Berio"
      user-mail-address "drand48@gmail.com")
#+end_src

Start emacs with a maximized window
#+begin_src emacs-lisp
;(add-hook 'window-setup-hook 'toggle-frame-maximized t)
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src

Do not keep undo history after quit (see [[https://github.com/hlissner/doom-emacs/issues/1407][this]]).
Currently undo-tree is disabled.
#+begin_src emacs-lisp
;; Don't save undo-tree history
(after! undo-tree
  (setq undo-tree-auto-save-history nil))
#+end_src

Counsel-grep for big files
#+begin_src emacs-lisp
(setq counsel-grep-base-command "rg -S -M 120 --no-heading --line-number --color never %s %s")
#+end_src

Force damn delete selection?
See [[https://gitlab.com/justinekizhak/dotfiles/blob/master/emacs/doom.d/config.org][this]]
#+begin_src emacs-lisp
(use-package delsel
  :disabled
  :ensure nil
  :config (delete-selection-mode +1))

(setq! delete-selection-mode t)
#+end_src

(Don't) Use CUA mode since I'm also using other editors
#+begin_src emacs-lisp
;(cua-mode +1)
#+end_src

#+begin_src emacs-lisp
(use-package flyspell
  :ensure t
  :config
  (setq ispell-program-name "/usr/local/bin/aspell"
        ispell-dictionary "english"))
#+end_src

#+begin_src emacs-lisp
#+end_src

** Figlet
Because I like ascii text. From [https://github.com/emacsmirror/figlet/blob/master/figlet.el]
Type ~M-x figlet~ and you will be asked for a string. If you use a prefix ~C-u
M-x figlet~ it will ask for a font.
#+begin_src emacs-lisp
(load! "~/.doom.d/figlet/figlet.el")
(setq figlet-font-dir "~/.doom.d/figlet/fonts")
(setq figlet-default-font "computer")
#+end_src

** Editor
Doom exposes five (optional) variables for controlling fonts in Doom. Here
are the three important ones:

#+begin_src emacs-lisp
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
#+end_src


They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
font string. You generally only need these two:

#+begin_src emacs-lisp
;(setq doom-font (font-spec :family "monospace" :size 14))
;
(setq doom-font (font-spec :family "Fira Code" :size 13))
#+end_src


There are two ways to load a theme. Both assume the theme is installed and
available. You can either set `doom-theme' or manually load a theme with the
~load-theme~~ function. This is the default:

#+begin_src emacs-lisp
;(setq doom-theme 'doom-one)
;(setq doom-theme 'doom-laserwave) ; kinda nice
;(setq doom-theme 'doom-zenburn) ; kinda nice
;(setq doom-theme 'doom-wilmersorf) ; kinda nice
(setq doom-theme 'doom-snazzy) ; kinda nice
;(setq doom-theme 'doom-rouge) ; kinda nice maybe
;(setq doom-theme 'doom-nord)
;(load-theme 'doom-snazzy)
#+end_src

This determines the style of line numbers in effect. If set to ~nil~, line
numbers are disabled. For relative line numbers, set this to ~relative~.
#+begin_src emacs-lisp
(setq display-line-numbers-type t)
#+end_src

No menu bar
#+begin_src emacs-lisp
(menu-bar-mode -1)
#+end_src

Some defaults
#+begin_src emacs-lisp
  (setq
   ;; Fix undo in commands affecting the mark.
   ; mark-even-if-inactive nil
   ;; Let C-k delete the whole line.
   ; kill-whole-line t
   ;; search should be case-sensitive by default
   case-fold-search nil
   scroll-conservatively 1
   )
#+end_src

#+begin_src emacs-lisp
(setq fast-but-imprecise-scrolling t)
(setq jit-lock-defer-time 0)
#+end_src

*** Key-bindings etc
#+begin_src emacs-lisp
; (evil-multiedit-default-keybinds)
#+end_src

#+begin_src emacs-lisp
;(global-set-key (kbd "C-y") 'yank)
(global-set-key (kbd "s-z") 'undo-fu-only-undo);undo-tree-undo)
(global-set-key (kbd "s-Z") 'undo-fu-only-redo);undo-tree-redo)
(global-set-key (kbd "s-v") 'yank)
(global-set-key (kbd "s-c") 'evil-yank)
(global-set-key (kbd "s-a") 'mark-whole-buffer)
(global-set-key (kbd "s-x") 'kill-region)
(global-set-key (kbd "s-s") 'save-buffer)
(global-set-key (kbd "s-s") 'save-buffer)
(global-set-key (kbd "s-f") 'swiper)
(global-set-key (kbd "s-p") nil)
; Just to avoid issues when switching editors
(global-set-key (kbd "s-p") nil)
(global-set-key (kbd "s-p") 'counsel-recentf)

(define-key evil-insert-state-map (kbd "C-e") 'move-end-of-line)
(define-key evil-insert-state-map (kbd "C-k") 'kill-line)
(define-key evil-insert-state-map (kbd "C-w") 'kill-region)
(define-key evil-visual-state-map (kbd "C-e") 'move-end-of-line)
(define-key evil-normal-state-map (kbd "C-e") 'move-end-of-line)
(define-key evil-normal-state-map (kbd "C-k") 'kill-line)
(define-key evil-normal-state-map (kbd "C-y") 'yank)
(define-key evil-insert-state-map (kbd "C-y") 'yank)
(define-key evil-normal-state-map (kbd "C-w") 'kill-region)
(define-key evil-visual-state-map (kbd "C-w") 'kill-region)

; I fins some of these evil key-bindings are really odd...
(define-key evil-insert-state-map (kbd "C-x C-s") 'save-buffer)


;; (map!
;;  "C-a"     #'move-beginning-of-line
;;  "C-e"      #'move-end-of-line
;;  )
#+end_src
Counsel: Use ~SPC-~~ followed by char

#+begin_src emacs-lisp
;; (map! :leader
;;       (:prefix "m"
;;         :desc "Ivy citation" "i"  #'ivy-bibtex-with-local-bibliography
;;         :desc "Reftex citation" "r"  #'reftex-citation
;;         ;:desc "figlet" "f" #("figlet")
;;         ;:desc "text" "f f" #'figlet
;;         ;:desc "comment" "f c" #'figlet-comment
;;         ))
#+end_src

Some key bindings I am used to, but this is not working in Doom...
#+begin_src emacs-lisp
;; Use C-u, C-d also in insert mode
(global-set-key (kbd "C-u") nil)
(global-set-key (kbd "C-d") nil)
(global-set-key (kbd "C-u") 'evil-scroll-up)
(global-set-key (kbd "C-d") 'evil-scroll-down)
(global-set-key (kbd "C-e") 'move-end-of-line)
#+end_src

Always support shift selec and delete
#+begin_src emacs-lisp
;; Delete selection
(setq delete-selection-mode t)
(setq shift-select-mode t)
#+end_src

Windmove (move among windows), not ideal but trying to mangle too many
key-bindings on Windows/WSL setup, where super and alt are taken mostly.
#+begin_src emacs-lisp
;; (global-set-key (kbd "C-q") nil)
;; (global-set-key (kbd "C-q <left>")  'windmove-left)
;; (global-set-key (kbd "C-q <right>") 'windmove-right)
;; (global-set-key (kbd "C-q <up>")    'windmove-up)
;; (global-set-key (kbd "C-q <down>")  'windmove-down)
#+end_src

Ace window. For multiple windows shows letters for selection
#+begin_src emacs-lisp
(global-set-key (kbd "M-o") 'ace-window)
#+end_src

*** Look and feel
#+begin_src emacs-lisp
(use-package! dimmer
  :config (dimmer-mode))
#+end_src

**** Minibuffer input
The minibuffer at bottom can be annoying if you use the mouse.
Trying https://github.com/muffinmad/emacs-mini-frame to fix it.
The following setup is borrowed from https://github.com/gcv/dotfiles/blob/master/emacs/selectrum.el
#+begin_src emacs-lisp
(use-package! mini-frame
  :custom
  (mini-frame-detach-on-hide nil)       ; workaround for hidden frames showing up
  (mini-frame-resize nil)               ; cannot be t until frame bugs are fixed
  (mini-frame-show-parameters
   '((top . 0.0)
     (left . 0.0)
     (height . 15)                      ; needed until frame bugs are fixed
     (width . 0.5)
     (left-fringe . 5)
     (right-fringe . 5)))
  (mini-frame-resize-max-height 15)
  (mini-frame-color-shift-step 7)
  :commands (mini-frame-read-from-minibuffer)

  :config
    (mini-frame-mode +1)
)
#+end_src
** Notes from doom config
Here are some additional functions/macros that could help you configure Doom:

 - ~load!~ for loading external *.el files relative to this one
 - ~use-package~ for configuring packages
 - ~after!~ for running code after a package has loaded
 - ~add-load-path!~ for adding directories to the `load-path', relative to
   this file. Emacs searches the ~load-path~ when you load packages with
   ~require~ or ~use-package~.
 - ~map!~ for binding new keys

 To get information about any of these functions/macros, move the cursor over
 the highlighted symbol at press 'K' (non-evil users must press 'C-c g k').
 This will open documentation for it, including demos of how they are used.


You can also try ~gd~ (or ~C-c g d~) to jump to their definition and see how
they are implemented.

** Org mode customizations


Prettification seems to be broken (at least on mac) for org mode
#+begin_src emacs-lisp
(add-hook 'org-mode-hook (lambda ()
    (setq +pretty-code-symbols-alist '(org-mode nil ))))
#+end_src

If you use `org' and don't want your org files in the default location below,
change `org-directory'. It must be set before org ~loads!~


#+begin_src emacs-lisp
(setq org-directory "~/Dropbox/org/")
#+end_src

Enable shift select in org mode
#+BEGIN_SRC emacs-lisp
(setq org-support-shift-select 'always)
#+END_SRC

*** Src captions
Want to add captions to src-block generated images.
Solution by [[http://kitchingroup.cheme.cmu.edu/blog/2016/02/26/Adding-captions-and-attributes-to-figures-and-tables-from-code-blocks-in-org-mode/][Kitchin]]:
#+begin_src emacs-lisp
(defun src-caption (&optional caption)
  ; Usage: :wrap (src-caption "This is a caption. label:fig-cap")
  "A wrap function for src blocks."
  (concat
   "ORG\n"
   (when caption
     (format "#+caption: %s" caption))))
#+END_SRC

*** Export

Don't exectute all src blocks:
#+begin_src emacs-lisp
(setq org-export-babel-evaluate t)
#+end_src
Embed CSS by default

#+begin_src emacs-lisp
(defun my-org-inline-css-hook (exporter)
  "Insert custom inline css"
  (when (eq exporter 'html)
    (let* ((dir (ignore-errors (file-name-directory (buffer-file-name))))
           (path (concat dir "style.css"))
           (homestyle (or (null dir) (null (file-exists-p path))))
           (final (if homestyle "~/.doom.d/org-style.css" path))) ;; <- set your own style file path
      (setq org-html-head-include-default-style nil)
      (setq org-html-head (concat
                           "<style type=\"text/css\">\n"
                           "<!--/*--><![CDATA[/*><!--*/\n"
                           (with-temp-buffer
                             (insert-file-contents final)
                             (buffer-string))
                           "/*]]>*/-->\n"
                           "</style>\n")))))

(add-hook 'org-export-before-processing-hook 'my-org-inline-css-hook)
#+end_src

*** Org-ref
Setup org-ref

#+begin_src emacs-lisp

;; Big hack to insert biblio entry titles
;; unelegant simply because I do not really know LISP
;; adapted from: http://www.mail-archive.com/emacs-orgmode@gnu.org/msg110385.html

(defun set-format (key)
  (setf (cdr (assoc key (cdr (assoc "org"
                                    org-ref-formatted-citation-formats))))
        "${author} ${year}. /${title}/. [[cite:${=key=}]]")
  )

(use-package! org-ref
    :after org
    :init
    ; code to run before loading org-ref
    :config
    ; code to run after loading org-ref
    (setq org-ref-default-bibliography '("./autograff-biblio.bib")) ; this is a list but multiple files don't seem to work
    (setq org-ref-formatted-citation-backend "org")
    (set-format "article")
    (set-format "inproceedings")
    (set-format "book")
    (set-format "phdthesis")
    (set-format "inbook")
    (set-format "incollection")
    (set-format "proceedings")
    (set-format "unpublished")

    )
#+end_src

Also for some reason "phdthesis" is not included in the version of bibtex used
here. Adapted from [[https://github.com/eush77/dotfiles/blob/fede630f5ad677af9e4294b6549e1ff4ed9bfc15/emacs/.emacs.d/config/config-bibtex.el][here]]
#+begin_src emacs-lisp
(defvar my-bibtex-biblatex-entry-type-special-aliases
  '(("Thesis"
     ("MastersThesis" "Master's Thesis")
     ("PhdThesis" "PhD Thesis"))
    ("Report"
     ("TechReport" "Technical Report")))
  "Special entry type aliases specified in BibLaTeX.")

(after! bibtex
;; Add special entry type aliases.
(pcase-dolist (`(,aliasee . ,aliases)
               my-bibtex-biblatex-entry-type-special-aliases)
  (pcase-let ((`(_ _ ,required nil ,optional)
               (assoc aliasee bibtex-biblatex-entry-alist)))
    (dolist (alias aliases)
      (add-to-list 'bibtex-biblatex-entry-alist
                   (append alias
                           (list (remove '("type") required)
                                 nil
                                 (cons '("type") optional)))))))

(bibtex-set-dialect 'biblatex)
)
#+end_src
#+begin_src emacs-lisp
;; (use-package! helm-bibtex
;;   :config
;;   (setq helm-bibtex-bibliography '("./autograff-biblio.bib"))
;; )
#+end_src

Setup org to open Zotero links
#+BEGIN_SRC emacs-lisp
;; Create hyperlink on export
(defun zotero-org-export (link description format)
  (let ((path (concat "zotero:" link))
        (desc (or description "Open in Zotero")))
    (pcase format
      (`html (format "<a target=\"_blank\" href=\"%s\">%s</a>" path desc))
      (`latex (format "\\href{%s}{%s}" path desc))
      (`texinfo (format "@uref{%s,%s}" path desc))
      (`ascii (format "%s (%s)" desc path))
      (t path))))
;; Setup links
(add-hook 'org-mode-hook
          (lambda ()
(org-add-link-type "zotero"
                   (lambda (path)
                              (browse-url (concat "zotero:" path)))
                   'zotero-org-export)))
#+END_SRC

Preview latex on save ([[https://emacs.stackexchange.com/questions/38198/automatically-preview-latex-in-org-mode-as-soon-as-i-finish-typing][from]])
#+begin_src emacs-lisp
;; (defun my/org-render-latex-fragments ()
;;   (if (org-list-latex-overlays)
;;       (progn (org-toggle-latex-fragment)
;;              (org-toggle-latex-fragment))
;;     (org-toggle-latex-fragment)))

;; (add-hook 'org-mode-hook
;;           (lambda ()
;;             (add-hook 'after-save-hook 'my/org-render-latex-fragments nil 'make-the-hook-local)))
#+end_src
Counsel key-bindings
#+begin_src emacs-lisp
(map!
 :after org
 :map org-mode-map
 :leader
      (:prefix "m"
        :desc "Insert citation" "i"  #'org-ref-helm-insert-cite-link
        ))
#+end_src

Also org mode resets the ~delete-selection-mode~. TODO find a better solution to this
#+begin_src emacs-lisp
(add-hook 'org-mode-hook '(lambda () (setq delete-selection-mode t)))
#+end_src

Preview latex fragments when cursor is elsewhere
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-fragtog-mode)
#+end_src

#+begin_src emacs-lisp
'(org-preview-latex-process-alist
       (quote
       ((dvipng :programs
         ("lualatex" "dvipng")
         :description "dvi > png" :message "you need to install the programs: latex and dvipng." :image-input-type "dvi" :image-output-type "png" :image-size-adjust
         (1.0 . 1.0)
         :latex-compiler
         ("lualatex -output-format dvi -interaction nonstopmode -output-directory %o %f")
         :image-converter
         ("dvipng -fg %F -bg %B -D %D -T tight -o %O %f"))
 (dvisvgm :programs
          ("latex" "dvisvgm")
          :description "dvi > svg" :message "you need to install the programs: latex and dvisvgm." :use-xcolor t :image-input-type "xdv" :image-output-type "svg" :image-size-adjust
          (1.7 . 1.5)
          :latex-compiler
          ("xelatex -no-pdf -interaction nonstopmode -output-directory %o %f")
          :image-converter
          ("dvisvgm %f -n -b min -c %S -o %O"))
 (imagemagick :programs
              ("latex" "convert")
              :description "pdf > png" :message "you need to install the programs: latex and imagemagick." :use-xcolor t :image-input-type "pdf" :image-output-type "png" :image-size-adjust
              (1.0 . 1.0)
              :latex-compiler
              ("xelatex -no-pdf -interaction nonstopmode -output-directory %o %f")
              :image-converter
              ("convert -density %D -trim -antialias %f -quality 100 %O")))))
#+end_src
#+begin_src emacs-lisp
(use-package! cdlatex
    :after (:any org-mode LaTeX-mode)
    :hook
    ((LaTeX-mode . turn-on-cdlatex)
     (org-mode . turn-on-org-cdlatex)))

(use-package! company-math
    :after (:any org-mode TeX-mode)
    :config
    (set-company-backend! 'org-mode 'company-math-symbols-latex)
    (set-company-backend! 'TeX-mode 'company-math-symbols-latex)
    (set-company-backend! 'org-mode 'company-latex-commands)
    (set-company-backend! 'TeX-mode 'company-latex-commands)
    (setq company-tooltip-align-annotations t)
    (setq company-math-allow-latex-symbols-in-faces t))
#+end_src

*** Drag and drop
#+begin_src emacs-lisp

(defun to-buffer-relative (path)
  (file-relative-name path (file-name-directory buffer-file-name)))

(defun make-buffer-subdir (name)
  (let ((path  (concat (file-name-directory buffer-file-name) name)))
    (make-directory path t)
    (file-name-as-directory path))
  )
(defun copy-and-get-relative-path (path dir-name)
  (let ((file (concat (make-buffer-subdir dir-name) (file-name-nondirectory path)))
	)

    (copy-file path file t)
    (concat "./" dir-name "/"  (file-name-nondirectory path))
    )
  )

;; (defun my-dnd-func (event)
;;   (interactive "e")
;;   (goto-char (nth 1 (event-start event)))
;;   (x-focus-frame nil)
;;   (let* ((payload (car (last event)))
;;          (type (car payload))
;;          (fname (cadr payload))
;;          (img-regexp "\\(png\\|jp[e]?g\\)\\>"))
;;     (cond
;;      ;; insert image link
;;      ((and  (eq 'drag-n-drop (car event))
;;             (eq 'file type)
;;             (string-match img-regexp fname))
;;       (insert (format "[[file:%s]]" (copy-and-get-relative-path fname "images"))) ; (file-name-base buffer-file-name)
;;       (org-display-inline-images t t))
;;      ;; insert image link with caption
;;      ((and  (eq 'C-drag-n-drop (car event))
;;             (eq 'file type)
;;             (string-match img-regexp fname))
;;       (insert "#+ATTR_ORG: :width 300\n")
;;       (insert (concat  "#+CAPTION: " (read-input "Caption: ") "\n"))
;;       (insert (format "[[file:%s]]"  (copy-and-get-relative-path fname "images")))
;;       (org-display-inline-images t t))
;;      ;; C-drag-n-drop to open a file
;;      ((and  (eq 'C-drag-n-drop (car event))
;;             (eq 'file type))
;;       (find-file fname))
;;      ((and (eq 'M-drag-n-drop (car event))
;;            (eq 'file type))
;;       (insert (format "[[attachfile:%s]]"  (copy-and-get-relative-path fname "files"))))
;;      ;; regular drag and drop on file
;;      ((eq 'file type)
;;       (insert (format "[[%s]]\n" (copy-and-get-relative-path fname "files")))
;;       )
;;      (t
;;       (error "I am not equipped for dnd on %s" payload)))))



;(define-key org-mode-map (kbd "<drag-n-drop>") 'my-dnd-func)
;(define-key org-mode-map (kbd "<C-drag-n-drop>") 'my-dnd-func)
;(define-key org-mode-map (kbd "<M-drag-n-drop>") 'my-dnd-func)

;; Insert files in org mode
;; From http://kitchingroup.cheme.cmu.edu/blog/2015/07/10/Drag-images-and-files-onto-org-mode-and-insert-a-link-to-them/

;; Paste from clipboard
;; http://www.enist.org/blog/post/pasting-images-into-org-mode-on-mac/
(defun org-paste-clipboard ()
  (interactive)
  (setq myvar/folder-name "images")	;

  (setq myvar/folder-path  (make-buffer-subdir myvar/folder-name)) ;  (file-name-directory buffer-file-name)
  (let* ((image-file (concat
		      myvar/folder-path
		      (read-string "Enter image name:")
		      ".png")))

    (message image-file)
    ;; requires pngpaste on OSX (brew install pngpaste)
    (call-process-shell-command (concat "pngpaste " image-file))

    (insert (concat  "#+CAPTION: " (read-string "Caption: ") "\n"))
    (insert (format "[[file:%s]]"  (concat "./" myvar/folder-name "/" (file-name-nondirectory image-file))  ))
    (org-display-inline-images)))

#+end_src

** Magit
Performance improvements
#+begin_src emacs-lisp
(use-package! magit
    :config
    ; code to run after loading magit
    (setq magit-commit-show-diff nil)
    (setq magit-revert-buffers 1)
    )
#+end_src
Do not show whitespace diffs

#+begin_src emacs-lisp
(setq ediff-diff-options "-w")
#+end_src

** Latex (AucTex + RefTex)


And set pdf-tools internal latex viewer
#+begin_src emacs-lisp
;(setenv "PKG_CONFIG_PATH" (concat (shell-command-to-string "printf %s \"$(brew --prefix libffi)\"") "/lib/pkgconfig/"))
#+end_src

#+begin_src emacs-lisp
(setq +latex-viewers '(pdf-tools))
#+end_src

#+begin_src emacs-lisp
;(define-key pdf-view-mode-map (kbd "M-s") nil)
;(define-key pdf-view-mode-map (kbd "M-s") 'isearch-forward)
#+end_src

When Option-clicking on text, jump to pdf position.
#+begin_src emacs-lisp
(with-eval-after-load "latex"
  (define-key LaTeX-mode-map [M-down-mouse-1] 'pdf-sync-forward-search))
#+end_src


From doom issues, sync latex and pdf, still bit dodgy:
#+begin_src emacs-lisp
;; to use pdfview with auctex
 (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
    TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))
    TeX-source-correlate-start-server t) ;; not sure if last line is neccessary
#+end_src


Trying to get rid of the ~epdfinfo: Destination not found~ error.
See [https://github.com/politza/pdf-tools/issues/302]
#+begin_src emacs-lisp
(add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)
#+end_src

Ask for master file (~Tex-master~ multifile support)? Ideally we would want
AucTex to always ask (~nil~), but this is set in the local variables of a buffer
(~C-c n~ to reset). Also seems that manually setting the variable (at the end of
the doc) does not work, so it needs to be done with ~C-c _~ at least on Mac.
#+begin_src emacs-lisp
(add-hook 'LaTeX-mode-hook
          (setq-default TeX-master t))
#+end_src


Get RefTex to search for valid biblios
#+begin_src emacs-lisp
(setq reftex-use-external-file-finders t)
#+end_src

Setting up IVY bibtex
#+begin_src emacs-lisp
;(setq ivy-bibtex-default-action 'ivy-bibtex-insert-key)
#+end_src


#+begin_src emacs-lisp
;; Using pdflatex as the default compiler for .tex files
(setq latex-run-command "pdflatex")
;; always autosave
(setq TeX-save-query nil)
;; In AUCTex, make PDF by default (can toggle with C-c C-t C-p)
(add-hook 'LaTeX-mode-hook '(lambda () (TeX-PDF-mode 1)))
#+end_src

And... AucTex does not automatically support nomencalture so (from [https://tex.stackexchange.com/questions/36582/using-nomenclature-and-emacs])
#+begin_src emacs-lisp
;; nomenclature for latex
(eval-after-load "tex"
  '(add-to-list 'TeX-command-list
                '("Nomenclature" "makeindex %s.nlo -s nomencl.ist -o %s.nls"
                  (lambda (name command file)
                    (TeX-run-compile name command file)
                    (TeX-process-set-variable file 'TeX-command-next TeX-command-default))
                  nil t :help "Create nomenclature file")))
#+end_src

Weird behavior with AucTex (elsewhere?) where creating a double ~''~ replaces
the previous closing bracket with quotes?? (**NB** this does not really work)
#+begin_src emacs-lisp
(setq TeX-quote-after-quote nil)
#+end_src

#+begin_src emacs-lisp
(map!
 :after tex
 :map TeX-mode-map
 :leader
      (:prefix "m"
        :desc "Insert citation" "i"  #'helm-bibtex-with-local-bibliography
        :desc "Reftex citation" "r"  #'reftex-citation
        ;:desc "figlet" "f" #("figlet")
        ;:desc "text" "f f" #'figlet
        ;:desc "comment" "f c" #'figlet-comment
        ))
#+end_src

Convert bibtex entries to Title Case, from
http://kitchingroup.cheme.cmu.edu/blog/2014/10/12/Title-casing-bibtex-entry-journal-titles/

To use, put this at beginning of bibtex file
#+begin_example
% (bibtex-map-entries 'jmax-title-case-article)
#+end_example
Place cursor at line and ~C-x C-e~

#+begin_src emacs-lisp
(defvar jmax-lower-case-words
  '("a" "an" "on" "and" "for"
    "the" "of" "in")
  "List of words to keep lowercase")

(defvar entry-types
  '("article" "journal" "book" "misc" "techreport" "inproceedings" "phdthesis")
  "List of bib entry types")

(defun jmax-title-case-article (&optional key start end)
  "Convert a bibtex entry article title to title-case. The
arguments are optional, and are only there so you can use this
function with `bibtex-map-entries' to change all the title
entries in articles."
  (interactive)
  (bibtex-beginning-of-entry)

  (let* ((title (bibtex-autokey-get-field "title"))
         (words (split-string title))
         (lower-case-words '("a" "an" "on" "and" "for"
                             "the" "of" "in")))
    (when
        ;(string= "article" (downcase (cdr (assoc "=type=" (bibtex-parse-entry)))))
        (-contains? entry-types (downcase (cdr (assoc "=type=" (bibtex-parse-entry)))))
      (setq words (mapcar
                   (lambda (word)
                     (if (or
                          ;; match words containing {} or \ which are probably
                          ;; LaTeX or protected words
                          (string-match "\\$\\|{\\|}\\|\\\\" word)
                          ;; these words should not be capitalized, unless they
                          ;; are the first word
                          (-contains? lower-case-words (s-downcase word)))
                         word
                       (s-capitalize word)))
                   words))

      ;; Check if first word should be capitalized
      (when (-contains? jmax-lower-case-words (car words))
        (setf (car words) (s-capitalize (car words))))

      ;; this is defined in doi-utils
      (bibtex-set-field
       "title"
       (mapconcat 'identity words " "))
      (bibtex-fill-entry))))
#+end_src

Tex word count with master file (from
[https://superuser.com/questions/125027/word-count-for-latex-within-emacs])
#+begin_src emacs-lisp
(defun latex-word-count-master ()
  (interactive)
  (if (eq TeX-master t)
      (setq master (buffer-file-name))
    (setq master (concat (expand-file-name TeX-master) ".tex")))
  (shell-command (concat "texcount "
                         "-dir "
                         "-unicode "
                         "-inc "
                         master)))
#+end_src

Also seems that AucTex resets the ~delete-selection-mode~
#+begin_src emacs-lisp
;(add-hook 'LaTeX-mode-hook '(lambda () (setq delete-selection-mode t)))
(eval-after-load "tex"
  '(progn
     '(setq delete-selection-mode t)

   '(setq TeX-complete-list
        (append '(
                  ("\\\\refsect{\\([^{}\n
\\%,]*\\)" 1 LaTeX-label-list "}")
                  ) TeX-complete-list))
 '(setq TeX-complete-list
        (append '(
                  ("\\\\refchap{\\([^{}\n
\\%,]*\\)" 1 LaTeX-label-list "}")
                  ) TeX-complete-list))
 '(setq TeX-complete-list
        (append '(
                  ("\\\\refig{\\([^{}\n
\\%,]*\\)" 1 LaTeX-label-list "}")
                  ) TeX-complete-list))
 '(setq TeX-complete-list
        (append '(
                  ("\\\\eqn{\\([^{}\n
\\%,]*\\)" 1 LaTeX-label-list "}")
                  ) TeX-complete-list))
  ))
#+end_src
#+begin_src emacs-lisp
(add-hook 'LaTeX-mode-hook '(lambda () (global-set-key (kbd "C-e") 'move-end-of-line)))
#+end_src

** Coding general
#+begin_src emacs-lisp
(setq flycheck-checker-error-threshold 2500)
#+end_src
** Python

** Jupyter-emacs

#+begin_src emacs-lisp
(set-popup-rule! "\*jupyter-repl...*" :side 'right :size .50 :vslot 2 :ttl nil :quit nil)
#+end_src
*** Workarounds
Unicode bug?
#+begin_src emacs-lisp
(defun delete-non-displayable ()
  "Delete characters not contained in the used fonts and therefore non-displayable."
  (interactive)
  (require 'descr-text) ;; for `describe-char-display'
  (save-excursion
    (goto-char (point-min))
    (while (re-search-forward "[^[:ascii:]]" nil 1)
      (unless (describe-char-display (1- (point)) (char-before))
        (replace-match "")))))
#+end_src

Maybe one day, there will be a way to use Jupyter without crying... Emacs 27 bug
in Jupyter emacs, REPL freezes with (relatively) large code blocks. Workaround
from [[https://github.com/nnicandro/emacs-jupyter/issues/219]], but it removes
fontification from REPL. No activity since August on repo....
#+begin_src emacs-lisp
(add-hook 'jupyter-repl-mode-hook
          (lambda () (font-lock-mode 0)))
#+end_src
*** Ox-Ipynb
Because I like notebooks but I hate writing them. Loaded in ~init.el~ from [[https://github.com/jkitchin/ox-ipynb]]
#+begin_src emacs-lisp
(require 'ox-ipynb)
#+end_src

*** Spyder-like experience
Have the REPL appear on the right
#+begin_src emacs-lisp
(set-popup-rule! "^\\*Python" :side 'right :width 0.5)
#+end_src

Tell jupyter emacs to send code to repl
#+begin_src emacs-lisp
(setq jupyter-repl-echo-eval-p t)
;(setq conda-anaconda-home "~/opt/miniconda3")
#+end_src

Send code between ~#%%~ pairs or end of file
#+begin_src emacs-lisp
(defvar last-executed-cell "")
(defun jupyter-send-cell()
  (interactive)
  (save-excursion
  (if (not (search-backward-regexp "#\s*%%" nil t))
        (message "Not in a cell")
      (forward-line)
      (beginning-of-line)
      (set-mark (point))

      (if (not (search-forward-regexp "#\s*%%" nil t))
          (end-of-buffer))
      ;(beginning-of-line)
      (goto-char (point))
      (activate-mark)
      ;(message (buffer-substring (mark) (point)))
      (setq last-executed-cell (buffer-substring (mark) (point)))
      (jupyter-eval-string last-executed-cell)
      (deactivate-mark)
      )))

(defun jupyter-execute-last()
  (interactive)
  (jupyter-eval-string last-executed-cell)
)
#+end_src

Key bindings, see [[https://github.com/lummm/config/blob/909da5468267902277b538970ad851d368ee5a65/emacs/shared/keybindings.emacs][this]].
#+begin_src emacs-lisp
(defun unset-jupyter-keys ()
(define-key jupyter-repl-interaction-mode-map (kbd "C-c C-c") nil))
(add-hook 'jupyter-repl-interaction-mode-hook
          #'unset-jupyter-keys)

(defun jupyter-nb-keybindings()
  (local-set-key (kbd "C-c C-c") 'jupyter-send-cell)
  (local-set-key (kbd "C-c C-x") 'org-babel-remove-result)
)
(add-hook 'jupyter-repl-interaction-mode-hook
          #'jupyter-nb-keybindings)

#+end_src


** C++
#+begin_src emacs-lisp
(after! projectile
  (projectile-register-project-type 'cmake '("CMakeLists.txt")
                                  :project-file "CMakeLists.txt"
                                  :compilation-dir "build"
                                  :configure "cmake %s -B %s"
                                  :compile "cmake ..; make -j4"
                                  :test "ctest"
                                  :install "cmake --build . --target install"
                                  :package "cmake --build . --target package")
  )
#+end_src

#+begin_src emacs-lisp

(use-package lsp-mode
  :config
  (setq lsp-vetur-format-options-tab-size 4)
  ;(setq lsp-vetur-format-enable nil)
  (setq lsp-prompt-projet-root t)
  (setq lsp-auto-guess-root nil)
  (setq lsp-enable-snippet nil)
  ;(add-to-list 'lsp-file-watch-ignored "[/\\\\]\\data")
  ;(add-to-list 'lsp-file-watch-ignored "[/\\\\]\\bin")
)

;; clang-format
(use-package clang-format
	:ensure t
	:bind (("C-c f b" . clang-format-buffer)
				 ("C-c f r" . clang-format-region))
	:hook (before-save . (lambda ()
												 (when (derived-mode-p 'c-mode 'c++-mode)
													 (clang-format-buffer))))
	:custom
	(clang-format-style "file")
	;(clang-format-fallback-style "")
    ;https://zed0.co.uk/clang-format-configurator/
    (clang-format-fallback-style "none")
    )

(setq c-basic-offset 2)
 ;; (clang-format-fallback-style
 ;;         "{BasedOnStyle: google, AlignConsecutiveAssignments: true, BinPackArguments: true, BinPackParameters: true, AlignAfterOpenBracket: true, TabWidth: 4}")
(defun my-c++-mode-hook ()
  (setq indent-tabs-mode t
		tab-width 2
		c-basic-offset 2))
(add-hook 'c++-mode-hook 'my-c++-mode-hook)

;; DAP THIS
(use-package dap-mode
 :config
 (dap-mode 1)
 (require 'dap-hydra)
(require 'dap-launch)
(require 'dap-cpptools)
(setq dap-print-io 1)
; (require 'dap-gdb-lldb)	; download and expand lldb-vscode to the =~/.extensions/webfreak.debug= ;gdb-lldb
; (use-package dap-lldb
 ; :disabled t)
 (use-package dap-ui
   :ensure nil
   :config
   (dap-ui-mode 1)))

;; (add-hook! 'gud-mode-hook
;;            #'company-mode)
;; (require 'gud-lldb)

;; (use-package dap-mode
;;   :ensure t
;;   :commands dap-mode
;;   :hook (dap-stopped . (lambda (arg) (call-interactively #'dap-hydra)))
;;   :config
;;   (dap-mode 1)
;;   (require 'dap-ui)
;;   (dap-ui-mode 1)
;;   (require 'dap-lldb)
;;   (setq dap-lldb-debug-program "/Users/colormotor/.vscode/extensions/lanza.lldb-vscode-0.2.2/bin/darwin/bin/lldb-vscode"))
#+end_src

*** DAP MODE
Not working yet.

Following instructions [[https://github.com/roangel/my_emacs_config/][here]] to compile lldb-vscode in llvm-project (after clone),
pretty long procedure. Hope I can ditch VScode for good with this...
#+begin_example
mkdir build; cd build
cmake ../llvm -DLLVM_ENABLE_PROJECTS="clang;libcxx;lldb"
make -j4 lldb lldb-server lldb-vscode
#+end_example
On mac+miniconda there is an issue related to ncurses, this is an ugly workaround:
#+begin_example
cp ~/opt/miniconda3/lib/libtinfo.6.dylib /usr/local/lib
#+end_example

#+begin_src emacs-lisp
;; (setq dap-lldb-debug-program '("~/develop/llvm-project/build/bin/lldb-vscode"))
;; (require 'dap-lldb)
;; (setq dap-print-io 1)
#+end_src
