#+AUTHOR: Daniel Berio
#+EMAIL: drand48@gmail.com
#+PROPERTY: header-args :emacs-lisp :tangle yes :cache yes :results silent :comments link :exports code


#+begin_src emacs-lisp
(setq user-full-name "Daniel Berio"
      user-mail-address "drand48@gmail.com")
#+end_src

Emacs is not perfect, but I just cannot find a better environment for coding,
especially given the advantages of /Org mode/. The main thing that I miss in Emacs, compared to
editors like Visual Studion Code, is a simple way to add multiple cursors that span a whole
text line.  and issues I've had with "delete selection mode" (the standard in
common eidtors), which seems to disable itself at times, with a cause that I
have yet to identify. But, at least for my use case, the utility of Org mode by
far outweights these drawbacks.

I've been using the [[https://github.com/doomemacs/doomemacs][Doom emacs]] configuration framework for a while now, after
trying first Spacemacs and then SciMax configurations. I found Doom to be the
most lightweight and practical solution to fully enter the emacs rabbithole.

* Doom specific (from doom config)
To execute all and update use ~C-c C-v b~ or ~C-c C-v C-b~ or ~M-x
org-babel-execute-buffer~
Or ~M-x doom/reload~

**NB.** For a literate config to work you need to set the ~literate~ flag in ~init.el~

Doom keybindings ref:
- https://github.com/hlissner/doom-emacs/blob/develop/modules/config/default/+evil-bindings.el

** Introspection
Here are some additional functions/macros that could help you configure Doom:

 - ~load!~ for loading external *.el files relative to this one
 - ~use-package~ for configuring packages
 - ~after!~ for running code after a package has loaded
 - ~add-load-path!~ for adding directories to the `load-path', relative to
   this file. Emacs searches the ~load-path~ when you load packages with
   ~require~ or ~use-package~.
 - ~map!~ for binding new keys

 To get information about any of these functions/macros, move the cursor over
 the highlighted symbol at press 'K' (non-evil users must press 'C-c g k').
 This will open documentation for it, including demos of how they are used.


You can also try ~gd~ (or ~C-c g d~) to jump to their definition and see how
they are implemented.



* Example configuration links
Some existing literate configurations to get inspiration from
- [[https://tecosaur.github.io/emacs-config/config.html][Techosaur: Very long nice config]]
- https://github.com/hjertnes/emacs.d/blob/master/hjertnes.org
- https://blog.sumtypeofway.com/posts/emacs-config.html
- https://zzamboni.org/post/my-doom-emacs-configuration-with-commentary/
- http://alhassy.com/emacs.d/


* Editor configuration
** Splash screen
See https://discourse.doomemacs.org/t/how-to-change-your-splash-screen/57

Remove menu
#+begin_src emacs-lisp
; (remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-shortmenu)
#+end_src
And add agenda view (annoying)
#+begin_src emacs-lisp
; (add-hook! '+doom-dashboard-functions :append (org-agenda-list))
#+end_src
** Pixel scrolling
I LOVE emacs, but damn it is pretty ridiculous that in 2023 it is still not possible to smoothly scroll images.
Setting the following to ~1~ completely blocks Emacs:
# #+begin_src emacs-lisp
# (pixel-scroll-mode 0)
# #+end_src

#+begin_src emacs-lisp
(pixel-scroll-precision-mode 1)
(setq  scroll-conservatively 0) ; Seems to a void annoying jumping?
#+end_src

** Fonts
Doom exposes five (optional) variables for controlling fonts in Doom. Here
are the three important ones:

#+begin_src emacs-lisp
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
#+end_src

They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
font string. You generally only need these two:

#+begin_src emacs-lisp
;(setq doom-font (font-spec :family "monospace" :size 14))
;
(setq doom-font (font-spec :family "Fira Code" :size 13))
;; (setq doom-font (font-spec :family "Fira Code" :size 16)) ; <- for presentations

;(setq doom-font (font-spec :family "Hack Nerd Font" :size 13))
;; (setq doom-font (font-spec :family "Source Code Pro" :size 13))
;(setq doom-font (font-spec :family "Fira Code" :size 14))
;(setq doom-font (font-spec :family "Monaco" :size 12))

#+end_src

** Themes and customization
There are two ways to load a theme. Both assume the theme is installed and
available. You can either set `doom-theme' or manually load a theme with the
~load-theme~~ function. This is the default:

I like to switch around between these:
#+begin_src emacs-lisp
;; (setq doom-theme 'doom-one)
;; (setq doom-theme 'doom-laserwave) ; kinda nice
;; (setq doom-theme 'doom-zenburn) ; kinda nice greyish
;; (setq doom-theme 'doom-snazzy) ; kinda nice ++
;; (setq doom-theme 'doom-rouge) ; kinda nice maybe
;; (setq doom-theme 'doom-nord) ; very gray
;;
;;(setq doom-theme 'doom-manegarm) ; freddy kruger
(setq doom-theme 'doom-sourcerer) ; nice stuff
;;(setq doom-theme 'doom-meltbus) ; too black and white
;; (setq doom-theme 'doom-city-lights) ; nice greenish blue
;; (setq doom-theme 'doom-challenger-deep) ; nice
;; (setq doom-theme 'doom-sourcerer) ; nice gray/purple
;; (setq doom-theme 'doom-tomorrow-night)
;; (setq doom-theme 'doom-gruvbox) ; brown/orange
;; (setq doom-theme 'doom-material)
;; (setq doom-theme 'doom-oceanic-next) ; contrasty
;; (setq doom-theme 'doom-Iosvkem)
;; (setq doom-theme 'doom-nord-light) ; LIGHT
;; (setq doom-theme 'doom-wilmersorf) ; kinda nice (LIGHT)
;; (setq doom-theme 'doom-opera) ; OK
;; (setq doom-theme 'doom-opera-light) ; OK (LIGHT)
;; (load-theme doom-theme t) ;'doom-snazzy)
#+end_src

This determines the style of line numbers in effect. If set to ~nil~, line
numbers are disabled. For relative line numbers, set this to ~relative~.
#+begin_src emacs-lisp
(setq display-line-numbers-type t)
#+end_src

*** No menu bar?
I am using [[https://github.com/koekeishiya/yabai][Yabai]] on MacOS for window management.
Looks like the best solution, if using yabai is:
#+begin_example
brew install emacs-plus --with-no-titlebar --with-native-comp
#+end_example

#+begin_src emacs-lisp
;(menu-bar-mode -1)
(setq menu-bar-mode t
      tool-bar-mode nil
      scroll-bar-mode nil)

;; No worky with yabai
;; (add-to-list 'default-frame-alist '(undecorated . t))
;; (add-to-list 'default-frame-alist '(drag-internal-border . 1))
;; (add-to-list 'default-frame-alist '(internal-border-width . 5))

;(add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
;(add-to-list 'default-frame-alist '(ns-appearance . dark))
;;(menu-bar-mode t) ; Keeping this around for Yabai on mac
#+end_src

*** Dividers
#+begin_src emacs-lisp
(setq window-divider-default-bottom-width 4 ; in pixels
      window-divider-default-right-width 8)
#+end_src

*** Completion
Ivy has this absurd thing that it does not let you unselect a completion, making it impossible to save a filename that is partially equal to an existing one...
#+begin_src emacs-lisp
(setq ivy-use-selectable-prompt t)
#+end_src

**** Vertico
Vertico directory from https://www.rousette.org.uk/archives/hi-ho-hi-ho-it-s-back-to-doom-i-go/
#+begin_src emacs-lisp
(use-package! vertico-directory
  :after vertico
  :ensure nil
  ;; More convenient directory navigation commands
  :bind (:map vertico-map
              ("RET" . vertico-directory-enter)
              ("DEL" . vertico-directory-delete-char)
              ("M-DEL" . vertico-directory-delete-word))
  ;; Tidy shadowed file names
  :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))
#+end_src

Some defaults
#+begin_src emacs-lisp
  (setq
   ;; Fix undo in commands affecting the mark.
   ; mark-even-if-inactive nil
   ;; Let C-k delete the whole line.
   ; kill-whole-line t
   ;; search should be case-sensitive by default
   case-fold-search nil
   scroll-conservatively 1
   )
#+end_src


*** Parrot mode (toggle bool symbols)
Parrot mode to toggle between common boolean symbols
#+begin_src emacs-lisp
(use-package parrot
  :config
  (parrot-mode))

(define-key evil-normal-state-map (kbd "[r") 'parrot-rotate-prev-word-at-point)
(define-key evil-normal-state-map (kbd "]r") 'parrot-rotate-next-word-at-point)

(setq parrot-rotate-dict
      '(
        (:rot ("yes" "no") :caps t :upcase t)
        (:rot ("t" "f") :caps t :upcase t)
        (:rot ("on" "off") :caps t :upcase t)
        (:rot ("prev" "next"))
        (:rot ("true" "false") :caps t :upcase t)
        ))
#+end_src

*** Tweaks
Annoying pdf-tools undo warnings
#+begin_src emacs-lisp
;; (add-to-list 'warning-suppress-types '(undo discard-info))
#+end_src

#+begin_src emacs-lisp
;; (setq fast-but-imprecise-scrolling t)
;; (setq jit-lock-defer-time 0)
#+end_src

Modeline, add the nyan cat leaving a CO2 rainbow trail. For some bling since it is so [[https://www.theverge.com/2021/2/18/22287956/nyan-cat-crypto-art-foundation-nft-sale-chris-torres][valuable]] now
#+begin_src emacs-lisp
;(nyan-mode t)
;(setq doom-modeline-modal-icon nil)
#+end_src

Trying to improve slowness:

#+begin_src emacs-lisp
;; (after! gcmh
  ;; (setq gcmh-high-cons-threshold 33554432))
#+end_src


**** Show which buffer is active with dimmer

#+begin_src emacs-lisp
(use-package! dimmer
  :config (dimmer-mode))
#+end_src

** Start emacs with a maximized window (disabled)
#+begin_src emacs-lisp
;; (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src

** Key-bindings
#+begin_src emacs-lisp
(global-set-key (kbd "M-S-<right>") nil)
(global-set-key (kbd "M-S-<left>") nil)
(global-set-key (kbd "M-<right>") nil)
(global-set-key (kbd "M-<left>") nil)

;(global-set-key (kbd "C-y") 'yank)
;; (global-set-key (kbd "s-z") 'undo);undo-tree-undo)
;; (global-set-key (kbd "s-Z") 'undo-redo);undo-tree-redo)
;; (global-set-key (kbd "s-v") 'yank)
;; (global-set-key (kbd "s-c") 'evil-yank)
;; ;(global-set-key (kbd "s-a") 'mark-whole-buffer)
;; (global-set-key (kbd "s-x") 'kill-region)
;; (global-set-key (kbd "s-s") 'save-buffer)
;; (global-set-key (kbd "s-f") '+default/search-buffer)
;; (global-set-key (kbd "s-p") nil)
;; (global-set-key (kbd "C-;") 'iedit-mode) ; Multiple editing
; Just to avoid issues when switching editors

(define-key evil-insert-state-map (kbd "C-e") 'move-end-of-line)
(define-key evil-insert-state-map (kbd "C-k") 'kill-line)
(define-key evil-insert-state-map (kbd "C-w") 'kill-region)
(define-key evil-visual-state-map (kbd "C-e") 'move-end-of-line)
(define-key evil-normal-state-map (kbd "C-e") 'move-end-of-line)
;(define-key evil-normal-state-map (kbd "C-k") 'kill-line)
(define-key evil-normal-state-map (kbd "C-y") 'yank)
(define-key evil-insert-state-map (kbd "C-y") 'yank)
(define-key evil-normal-state-map (kbd "C-w") 'kill-region)
(define-key evil-visual-state-map (kbd "C-w") 'kill-region)

(define-key evil-insert-state-map (kbd "M-<left>") 'backward-sexp)
(define-key evil-insert-state-map (kbd "M-<right>") 'forward-sexp)

; I find some of these evil key-bindings are really odd...
(define-key evil-insert-state-map (kbd "C-x C-s") 'save-buffer)

; switch header
(global-set-key (kbd "s-<up>") 'ff-find-other-file)
#+end_src

#+begin_src emacs-lisp
;; (map! :leader
;;       (:prefix "m"
;;         :desc "Ivy citation" "i"  #'ivy-bibtex-with-local-bibliography
;;         :desc "Reftex citation" "r"  #'reftex-citation
;;         ;:desc "figlet" "f" #("figlet")
;;         ;:desc "text" "f f" #'figlet
;;         ;:desc "comment" "f c" #'figlet-comment
;;         ))
#+end_src

For org mode disable ~M-S-<right>~ and ~M-S-<left>~ when in source code
#+begin_src emacs-lisp
(after! org
  (add-hook 'org-src-mode-hook
            (lambda ()
              (define-key org-src-mode-map (kbd "M-S-<right>") nil)
              (define-key org-src-mode-map (kbd "M-S-<left>") nil)
              (define-key org-src-mode-map (kbd "C-a") nil)
              (define-key org-src-mode-map (kbd "C-e") nil)
              )))
#+END_SRC

Some key bindings I am used to
#+begin_src emacs-lisp
;; Use C-u, C-d also in insert mode
(global-set-key (kbd "C-u") nil)
(global-set-key (kbd "C-d") nil)
(global-set-key (kbd "C-u") 'evil-scroll-up)
(global-set-key (kbd "C-d") 'evil-scroll-down)
(global-set-key (kbd "C-e") 'move-end-of-line)
(global-set-key (kbd "s-/") 'evilnc-comment-or-uncomment-lines)

;; (global-set-key (kbd "M-<right>") 'forward-sexp)
;; (global-set-key (kbd "M-<left>") 'backward-sexp)
;; (global-set-key (kbd "C-<right>") 'forward-word)
;; (global-set-key (kbd "C-<left>") 'backward-word)
;; Unset these so shift select should pick them up?


;; (global-set-key (kbd "M-S-<right>") 'forward-sexp)
;; (global-set-key (kbd "M-S-<left>") 'backward-sexp)

#+end_src

Ace window. For multiple windows shows letters for selection
#+begin_src emacs-lisp
(global-set-key (kbd "M-o") 'ace-window)
#+end_src

String inflection (from-to-snake-case)
#+begin_src emacs-lisp
(global-set-key (kbd "C-c C") 'string-inflection-camelcase)
(global-set-key (kbd "C-c c") 'string-inflection-underscore)
#+end_src

Trying to sort out conflicts with window management
#+begin_src emacs-lisp

;; (defun org-unset-alt-keys ()
;;   (define-key org-mode-map (kbd "C-<S-up>") nil)
;;   (define-key org-mode-map (kbd "C-<S-down>") nil)
;;   (define-key org-mode-map (kbd "C-<S-left>") nil)
;; )

;; (defun evil-org-unset-alt-keys ()
;;    (define-key evil-org-mode-map (kbd "C-<S-up>") nil)
;;    (define-key evil-org-mode-map (kbd "C-<S-down>") nil)
;;    (define-key evil-org-mode-map (kbd "C-<S-left>") nil)
;; )
;; (with-eval-after-load 'org (org-unset-alt-keys))
;; (with-eval-after-load 'evil-org (evil-org-unset-alt-keys))

;; (global-set-key (kbd "<f12>") 'toggle-frame-fullscreen)
#+end_src

*** Evil
https://blog.meain.io/2017/how-emacs-took-over-my-vim-life/
#+begin_src emacs-lisp
;; (defun minibuffer-keyboard-quit ()
;;   "Abort recursive edit.
;;         In Delete Selection mode, if the mark is active, just deactivate it;
;;         then it takes a second \\[keyboard-quit] to abort the minibuffer."
;;   (interactive)
;;   (if (and delete-selection-mode transient-mark-mode mark-active)
;;       (setq deactivate-mark  t)
;;     (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
;;     (abort-recursive-edit)))
;; (define-key evil-normal-state-map [escape] 'keyboard-quit)
;; (define-key evil-visual-state-map [escape] 'keyboard-quit)
;; (define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
;; (define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
;; (define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
;; (define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
;; (define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)
;; (global-set-key [escape] 'evil-exit-emacs-state)
#+end_src

**** Fixes
With Evil mode and insert active, shift selection uses word boundaries that is really annoying with code. Trying to fix it
#+begin_src emacs-lisp
(define-key evil-insert-state-map (kbd "C-S-<right>") nil)
(define-key evil-insert-state-map (kbd "C-S-<left>")  nil)
(define-key evil-insert-state-map (kbd "S-<right>") nil)
(define-key evil-insert-state-map (kbd "S-<left>")  nil)
#+end_src
**** Keybinding notes
Note that from insert mode it is possible to ~C-o~ and then use for one time any
of the commands below.

| h      | move one character left                                                         |
| j      | move one row down                                                               |
| k      | move one row up                                                                 |
| l      | move one character right                                                        |
| w      | move to beginning of next word                                                  |
| b      | move to previous beginning of word                                              |
| e      | move to end of word                                                             |
| W      | move to beginning of next word after a whitespace                               |
| B      | move to beginning of previous word before a whitespace                          |
| E      | move to end of word before a whitespace                                         |
|        | All the above movements can be preceded by a count; e.g. 4j moves down 4 lines. |
| %      | Jump to matching tag/paraenthesis                                               |
| 0      | move to beginning of line                                                       |
| $      | move to end of line                                                             |
| _      | move to first non-blank character of the line                                   |
| g_     | move to last non-blank character of the line                                    |
| gg     | move to first line                                                              |
| G      | move to last line                                                               |
| nG     | move to n'th line of file (n is a number; 12G moves to line 12)                 |
| H      | move to top of screen                                                           |
| M      | move to middle of screen                                                        |
| L      | move to bottom of screen                                                        |
| z.     | scroll the line with the cursor to the center of the screen                     |
| zt     | scroll the line with the cursor to the top                                      |
| zb     | scroll the line with the cursor to the bottom                                   |
| Ctrl-D | move half-page down                                                             |
| Ctrl-U | move half-page up                                                               |
| Ctrl-B | page up                                                                         |
| Ctrl-F | page down                                                                       |
| Ctrl-O | jump to last (older) cursor position                                            |
| Ctrl-I | jump to next cursor position (after Ctrl-O)                                     |
| Ctrl-Y | move view pane up                                                               |
| Ctrl-E | move view pane down                                                             |
| x      | remove char                                                                     |
| r      | replace char                                                                    |
| n      | next matching search pattern                                                    |
| N      | previous matching search pattern                                                |
| \*     | next whole word under cursor                                                    |
| \#     | previous whole word under cursor                                                |
| g*     | next matching search (not whole word) pattern under cursor                      |
| g#     | previous matching search (not whole word) pattern under cursor                  |
| %      | jump to matching bracket { } [ ] ( )                                            |
| fX     | to next 'X' after cursor, in the same line (X is any character)                 |
| FX     | to previous 'X' before cursor (f and F put the cursor on X)                     |
| tX     | til next 'X' (similar to above, but cursor is before X)                         |
| TX     | til previous 'X'                                                                |
| ;      | repeat above, in same direction                                                 |

**** Block editing
Block/edit modify. ~C-v~ enters /visual-block/ mode, which allows rectangle
selection with kill/yank etc. Insertion is a bit weird: press ~I~, insert at the
first line, and pressing ~Esc~ inserts at other points after (probably for perf reasons).


*** Minibuffer input
The minibuffer at bottom can be annoying if you use the mouse.
Trying https://github.com/muffinmad/emacs-mini-frame to fix it.
The following setup is borrowed from https://github.com/gcv/dotfiles/blob/master/emacs/selectrum.el
#+begin_src emacs-lisp
(use-package! mini-frame
  :custom
  (mini-frame-detach-on-hide nil)       ; workaround for hidden frames showing up
  (mini-frame-resize nil)               ; cannot be t until frame bugs are fixed
  (mini-frame-show-parameters
   '((top . 0.0)
     (left . 0.0)
     (height . 15)                      ; needed until frame bugs are fixed
     (width . 0.5)
     (left-fringe . 5)
     (right-fringe . 5)))
  (mini-frame-resize-max-height 15)
  (mini-frame-color-shift-step 7)
  :commands (mini-frame-read-from-minibuffer)

  :config
    (mini-frame-mode +1)
)
#+end_src

** Delete/shift selection mode

The following is from [[https://gitlab.com/justinekizhak/dotfiles/blob/master/emacs/doom.d/config.org][this]]
#+begin_src emacs-lisp
(use-package delsel
  :disabled
  :ensure nil
  :config (delete-selection-mode +1))

(setq delete-selection-mode t)
#+end_src


Also shift select (this luckily does not get disabled)
#+begin_src emacs-lisp

(setq shift-select-mode t)
#+end_src

** Issues
Situation seems to have improved with emacs28 on mac? Issue seems to be only related to *emacs-jupyter* and *AucTex* being active. With jupyter maybe related to REPL.

Delete selection mode disables itself when some kinds of errors happen.
Not much information on this online, found this thread that mentions the problem
https://stackoverflow.com/questions/14954490/emacs-delete-selection-mode-disables-itself

My main curiosity is: is this a problem I experience due to my limited knowledge of ELISP,
or is it a problem commonly experienced by Emacs users? The problem seems to be happen in either
AucTex or Jupyter-Emacs, and it does not seem to be caused by my (messy) config.

This discussion is ridiculous:
https://lists.defectivebydesign.org/archive/html/emacs-devel/2018-09/msg00816.html

#+begin_src emacs-lisp
;; (defadvice remove-hook (before debug-selection-hook (hook function &optional local))
;;   (if (and (eq hook 'pre-command-hook)
;;            (eq function 'delete-selection-pre-hook))
;;       (raise "Removing delete-selection-pre-hook")))

;; ;(ad-activate 'remove-hook)
;; (ad-deactivate 'remove-hook)
#+end_src

Does it have to do with smartparens mode?
https://github.com/doomemacs/doomemacs/issues/3609
#+begin_src emacs-lisp
(remove-hook 'doom-first-buffer-hook #'smartparens-global-mode)
#+end_src

*** Some old tests
#+begin_src emacs-lisp
;; (defun post-evil-insert (count &optional vcount skip-empty-lines)
;;   (message "Forcing delete selection mode")
;;   (setq delete-selection-mode t)
;;   )
;; (advice-add 'evil-insert :after 'post-evil-insert)
#+end_src

#+begin_src emacs-lisp
;; (defun watch-delsel (symbol newval op where)
;;    (message "Delsel: %s, val: %s, op: %s, where: %s" symbol newval op where)
;; )

;; (add-variable-watcher 'delete-selection-mode #'watch-delsel)
#+end_src


** Undo
Do not keep undo history after quit (see [[https://github.com/hlissner/doom-emacs/issues/1407][this]]). Ditched... Undo-tree is cool,
but unfortunately once in while it will mess up the undo history. This is rare,
but when it does happen it is a total disaster...
#+begin_src emacs-lisp
;; Don't save undo-tree history
; (after! undo-tree
;  (setq undo-tree-auto-save-history nil))
#+end_src

** DIRED
Just some notes
| C-x d   | start dired in desired :) dir.        |
| s       | toggle sorting order                  |
| < and > | navigate                              |
| RET     | visit current item                    |
| o       | visit current file (keepd dired open) |
| C       | copy file                             |
| P       | print file                            |
| D       | delete file                           |
| R       | rename file                           |
| +       | create new dir                        |
| ^       | Up one dir                            |


** Counsel-grep for big files
#+begin_src emacs-lisp
(setq counsel-grep-base-command "rg -S -M 120 --no-heading --line-number --color never %s %s")
#+end_src

** Figlet
Because I like ascii text. From [https://github.com/emacsmirror/figlet/blob/master/figlet.el]
Type ~M-x figlet~ or ~M-x figlet-comment~ and you will be asked for a string.
If you use a prefix ~C-u
M-x figlet~ it will ask for a font (does not work in doom).
Use ~M-x figlet-preview-fonts~ to see a list of fonts (images/names).

#+begin_src emacs-lisp
(load! "~/.config/doom/figlet/figlet.el")
(setq figlet-font-dir "~/.config/doom/figlet/fonts")
(setq figlet-default-font "computer")
#+end_src

** Spelling
#+begin_src emacs-lisp
(use-package flyspell
  :ensure t
  :config
  (setq ispell-program-name "/usr/local/bin/aspell"
        ispell-dictionary "english"))
#+end_src

* Quarto mode
#+begin_src emacs-lisp
;; (require 'quarto-mode)
#+end_src

* Snippets
** Delete carriage returns
Happens when pating from Word, see [[https://stackoverflow.com/questions/23712076/how-to-remove-m-in-emacs#:~:text=That%20is%2C%20at%20the%20prompt,(replace%20it%20with%20nothing).][stack overflow post]]
#+begin_src emacs-lisp
(defun delete-carrage-returns ()
  (interactive)
  (save-excursion
    (goto-char 0)
    (while (search-forward "\r" nil :noerror)
      (replace-match ""))))
#+end_src


* Org mode (with Org-Roam)
#+begin_src emacs-lisp
(setq org-directory "~/Dropbox/org")
#+end_src
** Settings

*** org modern
#+begin_src emacs-lisp
; (global-org-modern-mode)
#+end_src

*** Issue: (autoload 'org-eldoc-get-src-lang "org-eldoc")
From here https://github.com/doomemacs/doomemacs/issues/7633 quickfix
#+begin_src emacs-lisp
(autoload 'org-eldoc-get-src-lang "org-eldoc")
#+end_src

*** Enable shift select and tabs in org mode
#+BEGIN_SRC emacs-lisp
(setq org-support-shift-select 'always)
(setq org-src-tab-acts-natively t)
#+END_SRC

*** Make sure delete selection is active
#+begin_src emacs-lisp
(after! org
  (setq delete-selection-mode t)
)
#+end_src

*** Org appear
Org appear makes hidden links appear when cursor is in the link
#+begin_src emacs-lisp
(use-package! org-appear
  :after org
  :hook (org-mode . org-appear-mode)
  :config (setq
           org-appear-autolinks t
           org-appear-autoentities t
           org-appear-autosubmarkers t ))
#+end_src

And show inline images by default
#+begin_src emacs-lisp
(setq org-display-inline-images t)
(setq org-startup-with-inline-images "inlineimages")
#+end_src
*** Prettification (disabled)
This is cool but slow, and seems to be broken (at least on mac) for org mode
#+begin_src emacs-lisp
;; (add-hook 'org-mode-hook (lambda ()
;;     (setq +pretty-code-symbols-alist '(org-mode nil ))))
#+end_src

*** Src captions
Want to add captions to src-block generated images.
Solution by [[http://kitchingroup.cheme.cmu.edu/blog/2016/02/26/Adding-captions-and-attributes-to-figures-and-tables-from-code-blocks-in-org-mode/][Kitchin]]:
#+begin_src emacs-lisp
(defun src-caption (&optional caption)
  ; Usage: :wrap (src-caption "This is a caption. label:fig-cap")
  "A wrap function for src blocks."
  (concat
   "ORG\n"
   (when caption
     (format "#+caption: %s" caption))))
#+END_SRC

*** HTML Export
Embed CSS by default. It would be nice to set a specific doom theme here, maybe the feature will come in doom.
For now the default css assumes a dark theme.

#+begin_src emacs-lisp
(defun my-org-inline-css-hook (exporter)
  "Insert custom inline css"
  (when (eq exporter 'html)
    ;; (let* ((dir (ignore-errors (file-name-directory (buffer-file-name))))
    ;;        (path (concat dir "style.css"))
    ;;        (homestyle (or (null dir) (null (file-exists-p path))))
    ;;        (final (if homestyle "~/.config/doom/latex.css" path))) ;; <- set your own style file path
      (let* ((dir (ignore-errors (file-name-directory (buffer-file-name))))
           (path (when dir (concat dir "style.css")))
           (final (if (and path (file-exists-p path))
                      path
                    "~/.config/doom/latex.css"))) ;; Default to the home CSS
      (message "Inserting CSS from %s" final)
      (setq org-html-head-include-default-style nil)
      (setq org-html-head-extra (concat
                           "<style type=\"text/css\">\n"
                           "<!--/*--><![CDATA[/*><!--*/\n"
                           (with-temp-buffer
                             (condition-case nil
                                 (insert-file-contents final)
                               (error (message "Failed to read CSS file at %s" final)))
                             (buffer-string))
                           "/*]]>*/-->\n"
                           "</style>\n"))
      )
    )
  )

(add-hook 'org-export-before-parsing-hook 'my-org-inline-css-hook)

(defun my-org-export-with-theme (orig-fun &rest args)
  "Advice function to apply a theme during org export and revert after."
  (let* ((export-theme 'leuven) ;; Replace with your desired theme
         (original-themes (mapcar #'symbol-name custom-enabled-themes))) ;; Store the current themes
    ;; Load the desired theme for export
    (load-theme export-theme t)
    ;; Perform the export
    (unwind-protect
        (apply orig-fun args)
      ;; Revert to the original themes
      (disable-theme export-theme)
      (mapc (lambda (theme) (load-theme (intern theme) t)) original-themes))))

(advice-add 'org-html-export-to-html :around #'my-org-export-with-theme)


#+end_src

#+begin_src emacs-lisp
(setq org-export-with-broken-links t)
#+end_src

*** Org date format

*** Custom date format

Having a custom date format in org is nice, but it becomes difficult to edit timestamps (e.g. ++1d for repeating).

#+begin_src emacs-lisp

;; (setq-default org-display-custom-times t)
;; (setq org-time-stamp-custom-formats '("<%a %b %e, %Y>" . "<%a %b %e %Y %H:%M>"))
#+end_src


However, we still want to remove these brackets when exporting
#+begin_src emacs-lisp
(defun org-export-filter-timestamp-remove-brackets (timestamp backend info)
  "removes relevant brackets from a timestamp"
  (cond
   ((org-export-derived-backend-p backend 'latex)
    (replace-regexp-in-string "[<>]\\|[][]" "" timestamp))
   ((org-export-derived-backend-p backend 'html)
    (replace-regexp-in-string "&[lg]t;\\|[][]" "" timestamp))))

(eval-after-load 'ox '(add-to-list
                       'org-export-filter-timestamp-functions
                       'org-export-filter-timestamp-remove-brackets))
#+end_src

*** Counsel key-bindings (disabled)
#+begin_src emacs-lisp
;; (map!
;;  :after org
;;  :map org-mode-map
;;  :leader
;;       (:prefix "m"
;;         :desc "Insert citation" "i"  #'org-ref-helm-insert-cite-link
;;         ))
#+end_src

*** Setup org to open Zotero links (disabled)
#+BEGIN_SRC emacs-lisp
;; Create hyperlink on export
;; (defun zotero-org-export (link description format)
;;   (let ((path (concat "zotero:" link))
;;         (desc (or description "Open in Zotero")))
;;     (pcase format
;;       (`html (format "<a target=\"_blank\" href=\"%s\">%s</a>" path desc))
;;       (`latex (format "\\href{%s}{%s}" path desc))
;;       (`texinfo (format "@uref{%s,%s}" path desc))
;;       (`ascii (format "%s (%s)" desc path))
;;       (t path))))
;; ;; Setup links
;; (add-hook 'org-mode-hook
;;           (lambda ()
;; (org-add-link-type "zotero"
;;                    (lambda (path)
;;                               (browse-url (concat "zotero:" path)))
;;                    'zotero-org-export)))
#+END_SRC

*** Drag and drop
Drag and drop and paste images into org
#+begin_src emacs-lisp
(defun to-buffer-relative (path)
  (file-relative-name path (file-name-directory buffer-file-name)))

(defun make-buffer-subdir (name)
  (let ((path  (concat (file-name-directory buffer-file-name) name)))
    (make-directory path t)
    (file-name-as-directory path))
  )
(defun copy-and-get-relative-path (path dir-name)
  (let ((file (concat (make-buffer-subdir dir-name) (file-name-nondirectory path)))
	)

    (copy-file path file t)
    (concat "./" dir-name "/"  (file-name-nondirectory path))
    )
  )
;; Insert files in org mode
;; From http://kitchingroup.cheme.cmu.edu/blog/2015/07/10/Drag-images-and-files-onto-org-mode-and-insert-a-link-to-them/

;; Paste from clipboard
;; http://www.enist.org/blog/post/pasting-images-into-org-mode-on-mac/
(defun org-paste-clipboard ()
  (interactive)
  (setq myvar/folder-name "images")	;

  (setq myvar/folder-path  (make-buffer-subdir myvar/folder-name)) ;  (file-name-directory buffer-file-name)
  (let* ((image-file (concat
		      myvar/folder-path
		      (read-string "Enter image name:")
		      ".png")))

    (message image-file)
    ;; requires pngpaste on OSX (brew install pngpaste)
    (call-process-shell-command (concat "pngpaste " image-file))

    (insert (concat  "#+CAPTION: " (read-string "Caption: ") "\n"))
    (insert (format "[[file:%s]]"  (concat "./" myvar/folder-name "/" (file-name-nondirectory image-file))  ))
    (org-display-inline-images)))

#+end_src
** Org-reveal (presentations)
#+begin_src emacs-lisp
(use-package! org-re-reveal
  :after org
  :config
  (setq org-re-reveal-width 1280
        org-re-reveal-height 720))
#+end_src


** Latex support
*** Preview latex fragments when cursor is elsewhere (org-fragtog)
Anoying situation is that if I repaat the same symbol more than once in an equation env (also inline),
the latex preview will show an additional number that ruins the document layout. E.g $k$ will work, but $k$
$k$
Not sure how this happens


#+begin_src emacs-lisp
(setq org-latex-create-formula-image-program 'dvisvgm) ;dvipng)
(setq org-preview-latex-default-process 'dvisvgm)

(defun my-extend-org-format-latex-header ()
  "Extend `org-format-latex-header` with custom LaTeX settings."
  (let ((custom-header "\\usepackage{amsmath}
                        \\usepackage{mathtools}
                        \\mathtoolsset{showonlyrefs}")
        (additional-settings "\\usepackage{hyperref}
                              \\renewcommand{\\theequation}{\\arabic{equation}}"))
    (setq org-format-latex-header
          (concat (or org-format-latex-header "")
                  "\n"
                  custom-header
                  "\n"
                  additional-settings))))

(with-eval-after-load 'ox-latex
  (my-extend-org-format-latex-header))
#+end_src

Customize preview:
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-fragtog-mode)

(setq org-highlight-latex-and-related '(native script entities))

(after! org
  (plist-put org-format-latex-options :foreground nil)
  (plist-put org-format-latex-options :background nil)
  (plist-put org-format-latex-options :scale 1.9)
)

(require 'org-src)
(add-to-list 'org-src-block-faces '("latex" (:inherit default :extend t)))


#+end_src
Test it
\[
\sqrt{2}
\]

Do we still need this? [[https://github.com/hieutkt/dotfiles/blob/d59a8dbf18786b7a2a37098ba8552421d3440992/emacs/.doom.d/config.org#L809][source]]
Make latex preview not freeze emacs (seems to work only with Emacs2.9+)
#+begin_src emacs-lisp
;; '(org-preview-latex-process-alist
;;        (quote
;;        ((dvipng :programs
;;          ("lualatex" "dvipng")
;;          :description "dvi > png" :message "you need to install the programs: latex and dvipng." :image-input-type "dvi" :image-output-type "png" :image-size-adjust
;;          (1.0 . 1.0)
;;          :latex-compiler
;;          ("lualatex -output-format dvi -interaction nonstopmode -output-directory %o %f")
;;          :image-converter
;;          ("dvipng -fg %F -bg %B -D %D -T tight -o %O %f"))
;;  (dvisvgm :programs
;;           ("latex" "dvisvgm")
;;           :description "dvi > svg" :message "you need to install the programs: latex and dvisvgm." :use-xcolor t :image-input-type "xdv" :image-output-type "svg" :image-size-adjust
;;           (1.7 . 1.5)
;;           :latex-compiler
;;           ("xelatex -no-pdf -interaction nonstopmode -output-directory %o %f")
;;           :image-converter
;;           ("dvisvgm %f -n -b min -c %S -o %O"))
;;  (imagemagick :programs
;;               ("latex" "convert")
;;               :description "pdf > png" :message "you need to install the programs: latex and imagemagick." :use-xcolor t :image-input-type "pdf" :image-output-type "png" :image-size-adjust
;;               (1.0 . 1.0)
;;               :latex-compiler
;;               ("xelatex -no-pdf -interaction nonstopmode -output-directory %o %f")
;;               :image-converter
;;               ("convert -density %D -trim -antialias %f -quality 100 %O")))))

;; (setq org-latex-preview-process-alist
;;       `((dvipng :programs
;;          ("latex" "dvipng")
;;          :description "dvi > png" :message "you need to install the programs: latex and dvipng." :image-input-type "dvi" :image-output-type "png" :latex-compiler
;;          ("%l -interaction nonstopmode -output-directory %o %f")
;;          :latex-precompiler
;;          ("%l -output-directory %o -ini -jobname=%b \"&%L\" mylatexformat.ltx %f")
;;          :image-converter
;;          ("dvipng --follow -D %D -T tight --depth --height -o %B-%%09d.png %f")
;;          :transparent-image-converter
;;          ("dvipng --follow -D %D -T tight -bg Transparent --depth --height -o %B-%%09d.png %f"))
;;         (dvisvgm :programs
;;                  ("latex" "dvisvgm")
;;                  :description "dvi > svg" :message "you need to install the programs: latex and dvisvgm." :image-input-type "dvi" :image-output-type "svg" :latex-compiler
;;                  ("%l -interaction nonstopmode -output-directory %o %f")
;;                  :latex-precompiler
;;                  ("%l -output-directory %o -ini -jobname=%b \"&%L\" mylatexformat.ltx %f")
;;                  :image-converter
;;                  ("dvisvgm --page=1- --optimize --clipjoin --relative --no-fonts --bbox=preview -o %B-%%9p.svg %f"))
;;         (imagemagick :programs
;;                      ("pdflatex" "convert")
;;                      :description "pdf > png" :message "you need to install the programs: latex and imagemagick." :image-input-type "pdf" :image-output-type "png" :latex-compiler
;;                      ("pdflatex -interaction nonstopmode -output-directory %o %f")
;;                      :latex-precompiler
;;                      ("pdftex -output-directory %o -ini -jobname=%b \"&pdflatex\" mylatexformat.ltx %f")
;;                      :image-converter
;;                      ("convert -density %D -trim -antialias %f -quality 100 %B-%%09d.png"))))
#+end_src

#+begin_src emacs-lisp
;; (use-package! cdlatex
;;     :after (:any org-mode LaTeX-mode)
;;     :hook
;;     ((LaTeX-mode . turn-on-cdlatex)
;;      (org-mode . turn-on-org-cdlatex)))

;; (use-package! company-math
;;     :after (:any org-mode TeX-mode)
;;     :config
;;     (set-company-backend! 'org-mode 'company-math-symbols-latex)
;;     (set-company-backend! 'TeX-mode 'company-math-symbols-latex)
;;     (set-company-backend! 'org-mode 'company-latex-commands)
;;     (set-company-backend! 'TeX-mode 'company-latex-commands)
;;     (setq company-tooltip-align-annotations t)
;;     (setq company-math-allow-latex-symbols-in-faces t))
#+end_src

*** Preview latex on save ([[https://emacs.stackexchange.com/questions/38198/automatically-preview-latex-in-org-mode-as-soon-as-i-finish-typing][from here]], disabled)
#+begin_src emacs-lisp
;; (defun my/org-render-latex-fragments ()
;;   (if (org-list-latex-overlays)
;;       (progn (org-toggle-latex-fragment)
;;              (org-toggle-latex-fragment))
;;     (org-toggle-latex-fragment)))

;; (add-hook 'org-mode-hook
;;           (lambda ()
;;             (add-hook 'after-save-hook 'my/org-render-latex-fragments nil 'make-the-hook-local)))
#+end_src

*** Latex export (org)
Export html with latex macros ([[https://emacs.stackexchange.com/questions/54703/exporting-latex-commands-to-html-mathjax]])
#+begin_src emacs-lisp
;;;###autoload
(with-eval-after-load "org"
  (add-to-list 'org-src-lang-modes '("latex-macros" . latex)))

(defvar org-babel-default-header-args:latex-macros
  '((:results . "raw")
    (:exports . "results")))

(defun prefix-all-lines (pre body)
  (with-temp-buffer
    (insert body)
    (string-insert-rectangle (point-min) (point-max) pre)
    (buffer-string)))

(defun org-babel-execute:latex-macros (body _params)
  (concat
   (prefix-all-lines "#+LATEX_HEADER: " body)
   "\n#+HTML_HEAD_EXTRA: <div style=\"display: none\"> \\(\n"
   (prefix-all-lines "#+HTML_HEAD_EXTRA: " body)
   "\n#+HTML_HEAD_EXTRA: \\)</div>\n"))
#+end_src

** Org Roam
Org roam allows to organize a database of notes with links. Some usecase links:

- https://github.com/jethrokuan/dots/blob/master/.doom.d/config.el
- https://hugocisneros.com/org-config/#org-roam

I keep roam separated from the main org directory, which I mostly use for the agenda
#+begin_src emacs-lisp
(setq org-roam-directory "~/Dropbox/orgroam/")
#+end_src

I then define the following note types:
- *main*: for notes on specific topics
- *article*: for longer "blog-like" articles that might also have code and images
- *reference*: for notes relating to a specific paper (from my Zotero-generated biblio)

#+begin_src emacs-lisp
(after! org-roam
    (setq org-roam-capture-templates
            '(("m" "main" plain
            "%?"
            :if-new (file+head "main/${slug}.org"
                                "#+title: ${title}\n")
            :immediate-finish t
            :unnarrowed t)
            ("r" "reference" plain "%?"
            :if-new
            (file+head "references/${slug}.org" "#+title: ${title}\n")
            :immediate-finish t
            :unnarrowed t)
            ("a" "article" plain "%?"
            :if-new
            (file+head "articles/${slug}.org" "#+title: ${title}\n#+filetags: :article:\n")
            :immediate-finish t
            :unnarrowed t)))

    (cl-defmethod org-roam-node-type ((node org-roam-node))
    "Return the TYPE of NODE."
    (condition-case nil
       (file-name-nondirectory
       (directory-file-name
           (file-name-directory
           (file-relative-name (org-roam-node-file node) org-roam-directory))))
       (error "")))

    (setq org-roam-node-display-template
        (concat "${type:15} ${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
    (org-roam-db-autosync-mode +1)

    (setq org-roam-graph-viewer "/Applications/Firefox.app/Contents/MacOS/firefox")
)
#+end_src

*** Org-roam UI
#+begin_src emacs-lisp
(use-package! websocket
    :after org-roam)

(use-package! org-roam-ui
    :after org-roam ;; or :after org
;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
;;         a hookable mode anymore, you're advised to pick something yourself
;;         if you don't care about startup time, use
;;  :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+end_src
** Calendar/Agenda
*** Notes
Basic keybindings:
- ~C-c C-t~ or ~SPC m t~ -> select todo state
- ~RET~ in normal mode toggles TODO and DONE.
- ~SPC m d s~ org-schedule (set time and date) use shift arrows to navigate
- ~C-c .~ edit date/time stamp
- ~SPC o a a a~ open agenda view
- ~SPC X~ org capture

**** Scheduling:
From https://emacs.stackexchange.com/questions/10504/understanding-scheduled-in-org-mode
- A *plain* timestamp, ~C-c .~
  - This is used for things like *appointments* where the entry occurs at a
    specific date/time. Such an entry will show up in the agenda on the
    specified day, and will not show up after that day has passed. Note that an
    appointment in the past won't keep showing up on your agenda regardless of
    whether you mark it DONE: if you didn't go to your doctor's appointment
    yesterday, that doesn't mean you still have one today!
- A *SCHEDULED* timestamp, ~C-c C-s~
  - This is used to indicate *when you intend to do the task*. It will show up on
    the agenda on the scheduled day. If you don't complete the task at that
    time, it will continue to show up on the agenda on the following days to
    show you that you have not completed something that you planned to do.
- A *DEADLINE* timestamp, ~C-c C-d~
  - This is used to indicate *when something must be completed*. Typically you
    want to see deadlines ahead of time, so that you can do whatever it is that
    must be done to meet them. Like a scheduled entry, if you miss a deadline it
    will continue to appear on the agenda as past due.

**** Cool feature
*SCHEDULED* and *DEADLINE* with a *TODO* will continue appearing in agenda view (DEADLINE with a reminder in xx days, SCHEDULED if not switched to *DONE*)

*** Checkboxes, make a list of checkbox items
- [ ] Item 1 (to check/uncheck either ~RET~), ~C RET~ to make a new one
- [ ] Or ~C-c C-c~ or ~SPC m x~ to just make check uncheck


*** Setup
#+begin_src emacs-lisp
;; Looks like we need to manually set this to use the ^T templates?
;; (use-package! org-journal)

(setq org-agenda-files '("~/Dropbox/org/"))

(after! org
    (setq! +org-capture-todo-file (expand-file-name "todo.org" org-directory)
           +org-capture-projects-file (expand-file-name "projects.org" org-directory)
           +org-capture-notes-file (expand-file-name "notes.org" org-directory)
           +org-capture-journal-file (expand-file-name "journal.org" org-directory)
           +org-capture-agenda-file (expand-file-name "agenda.org" org-directory)
           )

    (setq org-capture-templates
          '(("a" "Agenda" entry
            (file+headline +org-capture-agenda-file "Inbox")
            "* %?\nSCHEDULED:%^T\n%a":prepend t)
            ;"* %?\n%i\n%a" :prepend t)
            ("t" "Todo" entry
            (file+headline +org-capture-todo-file "Inbox")
            "* TODO %?\n%i\n%a" :prepend t)
            ("n" "Personal notes" entry
             (file+headline +org-capture-notes-file "Inbox")
             "* %u %?\n%i\n%a" :prepend t)
            ("j" "Journal" entry
             (file+datetree +org-capture-journal-file) ; +olp+
             "* %U %?\n%i" :prepend t) ; \n%a
            ("p" "Project todo" entry
             (file+headline +org-capture-projects-file "Inbox")
             "* TODO %?\n%i\n%a" :prepend t)))
)

#+end_src
**** Org superagenda
#+begin_src emacs-lisp

(setq org-agenda-skip-scheduled-if-done t
      org-agenda-skip-deadline-if-done t
      org-agenda-include-deadlines t
      org-agenda-block-separator nil
      org-agenda-tags-column 100 ;; from testing this seems to be a good value
      org-agenda-compact-blocks nil
      org-agenda-block-separator "_"
      org-agenda-span 10)


(use-package! org-super-agenda
  :after org-agenda
  :init
  (setq org-super-agenda-groups '((:name "Today"
                                         :time-grid t
                                         :scheduled today)
                                  (:name "Important"
                                         :priority "A")
                                  (:name "Due today"
                                         :deadline today)
                                  (:name "Overdue"
                                         :deadline past)
                                  (:name "Due soon"
                                         :deadline future)))
  :config
  (org-super-agenda-mode))
#+end_src
*** Sync with google
Most approaches seem to be broken. E.g. gcal is sensitie to changes in Google security policy.
Current best approach: sync into Google Calandar using:
- https://gist.github.com/florisvanvugt/c1c0e1c9a782b46430cf2854238a285f
- or https://orgmode.org/worg/org-tutorials/org-google-sync.html
*See orgroam under fat.etc Calendar section for specific links used.*
To set up regular exporting save the following to ~~/.doom.d/bin/export_calendar~:
#+begin_example emacs-lisp
#!/usr/bin/env doomscript

(defcli! export-calendar (&args files)
  ;; Make sure .doom.d/bin is in path for this to work
  (require 'doom-start)          ; load your user config
  (org-icalendar-combine-agenda-files)
)  ; and export it

(run! "export-calendar" (cdr (member "--" argv)))
#+end_example
and make it executable with ~chmod +x ~/.doom.d/export_calendar~ it.
Then make a script ~publish_calendar.sh~ to be placed together with org files (similar to the ones above) and schedule sync by opening ~crontab -e~ (VI) and writing
#+begin_example
MAILTO=""
5,20,35,50 * * * * sh ~/Dropbox/org/publish_calendar.sh >> ~/tmp/publish_cron_log.txt
#+end_example
Note that ~crontab -l~ shows current cron schedules

**** Note!
~crontab~ does not know about homebrew. So using commands like ~gawk~ and ~wget~ will require the following lines before 'MAIL':
#+begin_example
SHELL=/bin/zsh
PATH=/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/opt/homebrew/bin
#+end_example

**** Two way integration?
https://orgmode.org/worg/org-tutorials/org-google-sync.html

We will need ~gawk~ and ~wget~:
#+begin_example
brew install wget
brew install gawk
#+end_example
~gawk~ might require unlinking ~awk~ (is it OK?)
#+begin_example
brew unlink awk
#+end_example

Fetch ics links from google and outlook, and create a ~fetch_calendars.sh~ file:
#+begin_example
#!/usr/bin/env sh

ICS2ORG=~/Dropbox/org/ical2org.awk

ICSFILE=~/tmp/google.ics
URL=url here...

wget -O $ICSFILE $URL
$ICS2ORG < $ICSFILE > ~/Dropbox/org/googlecal.org

ICSFILE=~/tmp/outlook.ics
URL=url here...

wget -O $ICSFILE $URL
$ICS2ORG < $ICSFILE > ~/Dropbox/org/outlookcal.org
#+end_example

with ~crontab -e~ add:
#+begin_example
5,20,35,50 * * * * sh ~/Dropbox/org/fetch_calendars.sh &> /dev/null #sync org files
#+end_example

*** Setup
Org gcal exists, but broken. Eneded up using a complex script setup
https://orgmode.org/worg/org-tutorials/org-google-sync.html

#+begin_src emacs-lisp
;;; Taken pretty much verbatim from https://orgmode.org/worg/org-tutorials/org-google-sync.html
;;; Thanks to those developers!

;; https://stackoverflow.com/questions/23463962/emacs-export-calendar-bad-timezone-format-in-ics
(after! org
  (setq org-icalendar-timezone "Europe/London")
  (setq org-icalendar-combined-agenda-file "~/Dropbox/org/export.ics") ;; See ~/.doom.d/bin/export_calendar
  ;; Add scheduled and deadline to calendar
  (setq! org-icalendar-include-todo t
         org-icalendar-use-deadline '(event-if-todo event-if-not-todo todo-due)
         org-icalendar-use-scheduled '(event-if-todo event-if-not-todo todo-start))
  ;;; define tags that should be excluded
  (setq org-icalendar-exclude-tags (list "imported" "noexport" "google" "private"))
)
#+end_src

#+begin_src emacs-lisp
(defun sync-calendars ()
  (interactive)
  (shell-command "export_calendar; sh ~/Dropbox/org/fetch_calendars.sh; sh ~/Dropbox/org/publish_calendar.sh")
)
#+end_src

** Org-cite
Switching to this from Org-ref. See [[https://blog.tecosaur.com/tmio/2021-07-31-citations.html][Techosaur]] and [[https://kristofferbalintona.me/posts/202206141852/][This]] for usage.

#+begin_src emacs-lisp
(use-package! citeproc
  :defer t)
(map! :after org
      :map org-mode-map
      :localleader
      :desc "Insert citation" "@" #'org-cite-insert
      :desc "Formatted reference" "-" #'citar-insert-reference)

(use-package! citar
  :when (modulep! :completion vertico))

(use-package! oc
  :after org citar)

;;; Org-cite processors
(use-package! oc-biblatex
  :after oc)

(use-package! oc-csl
  :after oc)

(use-package! oc-natbib
  :after oc)
#+end_src

Keep zotero and a global bib file synched:
#+begin_src emacs-lisp
(after! citar
  (setq org-cite-global-bibliography '("~/Dropbox/orgroam/zotero-biblio.bib"))
  (setq! citar-bibliography '("~/Dropbox/orgroam/zotero-biblio.bib"))
  (setq citar-notes-paths '("~/Dropbox/orgroam"))
  )

;; (use-package! citar-org-roam
;;   :after citar org-roam
;;   :no-require
;;   :config (citar-org-roam-mode))

 (defun cm/org-roam-node-from-cite (entry-key)
    (interactive (list (citar-select-ref)))
    (let ((title (citar-format--entry
                  "${author editor:30} (${date year issued:4}) :: ${title}"
                  (citar-get-entry entry-key))))
      (org-roam-capture- :templates
                         `(("r" "reference" plain
                            "%?"
                            :if-new (file+head "references/${citekey}.org"
                                     ,(concat
                                       ":properties:\n"
                                       "  :roam_refs: [cite:@${citekey}]\n"
                                       "  :end:\n"
                                       "  #+title: ${title}\n"))
                            :immediate-finish t
                            :unnarrowed t))
                         :info (list :citekey entry-key)
                         :node (org-roam-node-create :title title)
                         :props '(:finalize find-file))))

;; ;; Create a new node from a bibliographic source. taken from
;; ;; https://jethrokuan.github.io/org-roam-guide/ and https://kristofferbalintona.me/posts/202206141852/
;;  (defun cm/org-roam-node-from-cite (keys-entries)
;;   (interactive (list (citar-select-refs :multiple nil)))
;;   (let ((title  (citar-format--entry "${author editor}  (${date year issued:4}) ${title}"
;;                                      (citar-get-entry keys-entries))))
;;     (org-roam-capture- :templates
;;                        '(("r" "reference" plain "%?" :if-new
;;                           (file+head "reference/${citekey}.org"
;;                                      ":PROPERTIES:
;;   :ROAM_REFS: [cite:@${citekey}]
;;   :END:
;;   #+title: ${title}\n")
;;                           :immediate-finish t
;;                           :unnarrowed t))
;;                        :info (list :citekey (car keys-entries))
;;                        :node (org-roam-node-create :title title)
;;                        :props '(:finalize find-file))))

;; (defun cm/org-roam-node-from-cite (key-entry) ;(keys-entries)
;;     (interactive (list (citar-select-ref))) ; :multiple nil :rebuild-cache t)))
;;     (let ((title (citar-format--entry key-entry ; (cdr keys-entries)
;;                                                 "${author editor} (${date year issued:4}) ${title}")))
;;       (org-roam-capture- :templates
;;                          '(("r" "reference" plain "%?" :if-new
;;                             (file+head "reference/${citekey}.org"
;;                                        ":PROPERTIES:
;; :ROAM_REFS: [cite:@${citekey}]
;; :END:
;; ,#+title: ${title}\n")
;;                             :immediate-finish t
;;                             :unnarrowed t))
;;                          :info (list :citekey key-entry) ;(car keys-entries))
;;                          :node (org-roam-node-create :title title)
;;                          :props '(:finalize find-file))))

(map!
 :map org-roam-mode-map
 :leader
 :desc "Add citation reference"
 "n r c" #'cm/org-roam-node-from-cite)
#+end_src
*** Org-cite and ox-ipynb
Org cite does not seem to work with Jupyter notebook export by default (see this [[https://github.com/jkitchin/ox-ipynb/issues/51][issue]]).
This is a hacky solution where I export a temporary org file with formatted references in a named section
and then copy this into the temporary buffer used by ox-ipynb for export
#+begin_src emacs-lisp
(defun remove-org-section-by-name (section-name)
    "Remove a section with SECTION-NAME in the current Org buffer if it exists."
    (let ((section-heading (concat "^\\*+ " (regexp-quote section-name))))
      (save-excursion
      (goto-char (point-min))
      (when (re-search-forward section-heading nil t)
        (let ((start (match-beginning 0)))
          (org-back-to-heading t) ;; Move to the beginning of the heading
          (org-cut-subtree)))
      )
    )
    nil
  )

 (defun print-inline-bibliography (&optional section-name)
    "Create a formatted bibliography section for the current org file.
If section-name is not provided, it defaults to 'References'."
    (let* ((section-name (or section-name "References"))
           (current-file (buffer-file-name (current-buffer)))
           (tmp-file "_tmp.md") ;;org")
           (bibliography-section (concat "* " section-name "\n#+print_bibliography:\n"))
           (bibliography-start (concat "^\\##+ " (regexp-quote section-name))))

      ;; Remove the bibliography section from current file if it exists
      ;; And add it followed by the required org-cite format
      (remove-org-section-by-name section-name)
      (save-excursion
        (goto-char (point-max))
        (insert bibliography-section))

      ;; Export to a temp file
      (let ((org-export-babel-evaluate nil)) ;; No code exec
          (org-export-to-file 'md tmp-file))

      ;; Remove the section used for export
      (remove-org-section-by-name section-name)

      ;; Copy the formatted version from the tmp file
      (with-temp-buffer
        (markdown-mode)  ;; Use markdown-mode instead of org-mode
        (insert-file-contents tmp-file)
        (goto-char (point-min))
        (let ((section-start "# References")) ;; Adjust this to match the markdown header
        (when (re-search-forward (concat "^" section-start) nil t)  ;; Search for the Markdown header
        (forward-line 1)  ;; Move to the line after the section header
        (let ((section-contents (buffer-substring (point) (point-max)))) ;; Copy till the end of the document
                (kill-new section-contents)))))  ;; Copy to the kill ring (clipboard)

      ;; (with-temp-file tmp-file
      ;;   (org-mode)
      ;;   (insert-file-contents tmp-file)
      ;;   (goto-char (point-min))
      ;;   (when (re-search-forward bibliography-start nil t)
      ;;     (goto-char (match-beginning 0))
      ;;     (org-copy-subtree)))

      ;; Finally paste it in the current buffer
      (save-excursion
              (goto-char (point-max))
              (insert "\n* References\n")
              (insert "\n#+begin_export html\n")
              (insert (current-kill 0))
              ;(org-paste-subtree)
              (insert "\n#+end_export\n")
              )

      ;; Cleanup
      ;; (delete-file tmp-file)
))

(with-eval-after-load 'ox-ipynb
  (setq ox-ipynb-preprocess-hook  '((lambda ()
				     (print-inline-bibliography))))

)
#+end_src

I typically want to open the notebook to test it, but the ~my-ipynb-export-to-ipynb-no-results-file-and-open~ function used from the menu defines its own ~ox-ipynb-preprocess-hook~. It is possible to modify the backend interface with:
#+begin_src emacs-lisp
(with-eval-after-load 'ox-ipynb
(org-export-define-derived-backend 'custom-jupyter-notebook 'org
  :menu-entry
  '(?n "Export to custom jupyter notebook"
       ((?r "to nb (no results) and open" my-ipynb-export-to-ipynb-no-results-file-and-open))))
)

(defun my-ipynb-export-to-ipynb-no-results-file-and-open (&optional async subtreep visible-only body-only info)
  (let ((ox-ipynb-preprocess-hook '((lambda ()
				      (org-babel-map-src-blocks nil
					(org-babel-remove-result))
                                      (print-inline-bibliography)))))
    (ox-ipynb-export-to-ipynb-file-and-open)))

#+end_src
* Magit (git)

Defo the best git client out there.
** Performance improvements
The following does not work no more?
#+begin_src emacs-lisp
;(use-package! magit
;    :config
;    ; code to run after loading magit
;    (setq magit-commit-show-diff nil)
;    (setq magit-revert-buffers 1)
;    )
#+end_src

** Diff line wrapping (?)
#+begin_src emacs-lisp
(setq magit-diff-toggle-refine-hunk t)
#+end_src
** Do not show whitespace diffs
#+begin_src emacs-lisp
(setq ediff-diff-options "-w")
#+end_src

** Keybinding notes
   | M-x magit-status | Git status                                                      |
   | k                | over file will delete it                                        |
   | s                | over a file will stage it                                       |
   | u                | over a file will unstage it                                     |
   | c                | commit, a commit message win will popup then C-c C-c to commit. |
   | g                | update status (eg when modifying files)                         |
   | P P              | push                                                            |
   | f f              | pull                                                            |
   | tab              | expands file diffs                                              |
   | b c              | create branch                                                   |
   | q                | exit                                                            |

   When writing commit message ~C-c C-c~ to save and close.
   Emergency: ~C-c C-k~ force quit

* Latex (AucTex + RefTex)
I use the pdf-tools internal latex viewer
But note that currently issues arise with ~PKG_CONFIG~ and poppler.
A workaround seems to be to manually compile ~epdfinfo~ with
#+begin_example
cd ~/.emacs.d/.local/straight/build-28.0.50/pdf-tools/build/server
autoreconf -i
./configure -q  && make clean && make -s
make -s install
#+end_example
Really annoying since this needs to be done for each ~doom upgrade~.


To view pdfs first time need to:
~M-x pdf-tools-install~

** Keybinding notes
~C-c C-c~ compile/view etc

** Config
Workaround for bug that emacs does not automatically set the correct mode for LaTex on startup
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.tex\\'" . LaTeX-mode))
#+end_src
Setup
#+begin_src emacs-lisp
(setq +latex-viewers '(pdf-tools))

(use-package! tex
  :defer t
  :init
  (setq TeX-command-default "LaTeX"
        TeX-auto-save t
        TeX-parse-self t
        TeX-save-query nil
        TeX-PDF-mode t)
  :config
  ;; Rebind C-c C-c to TeX-command-master
  (map! :map LaTeX-mode-map
        :localleader
        :desc "Run command" "c" #'TeX-command-master)
  (map! :map LaTeX-mode-map
        "C-c C-c" #'TeX-command-master))
#+end_src

When Option-clicking on text, jump to pdf position.
#+begin_src emacs-lisp
(with-eval-after-load "latex"
  (define-key LaTeX-mode-map [M-down-mouse-1] 'pdf-sync-forward-search))
#+end_src

From doom issues, sync latex and pdf, still bit dodgy:
#+begin_src emacs-lisp
 (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
    TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))
    TeX-source-correlate-start-server t) ;; not sure if last line is neccessary
#+end_src

#+begin_src emacs-lisp
(setq pdf-sync-backward-display-action t)
(setq pdf-sync-forward-display-action t)
#+end_src

Try to get pdf to always popup on side
#+begin_src emacs-lisp
(set-popup-rule! "\*.pdf" :side 'right :size .50 :vslot 2 :ttl nil :quit nil)
#+end_src

Ask for master file (~Tex-master~ multifile support)? Ideally we would want
AucTex to always ask (~nil~), but this is set in the local variables of a buffer
(~C-c n~ to reset). Also seems that manually setting the variable (at the end of
the doc) does not work, so it needs to be done with ~C-c _~ at least on Mac.
#+begin_src emacs-lisp
(add-hook 'LaTeX-mode-hook
          (setq-default TeX-master t))
#+end_src

Get RefTex to search for valid biblios
#+begin_src emacs-lisp
(setq reftex-use-external-file-finders t)
#+end_src


#+begin_src emacs-lisp
;; Using pdflatex as the default compiler for .tex files
(setq latex-run-command "pdflatex")
;; always autosave
(setq TeX-save-query nil)
;; In AUCTex, make PDF by default (can toggle with C-c C-t C-p)
(add-hook 'LaTeX-mode-hook '(lambda () (TeX-PDF-mode 1)))
#+end_src

Use the "SPC-m-@" to insert citations (like org mode)
#+begin_src emacs-lisp
(map! :after auctex
      :map LaTeX-mode-map
      :localleader
      :desc "Insert citation" "@" #'citar-insert-citation
)
#+end_src
** Issues
Trying to get rid of the ~epdfinfo: Destination not found~ error.
See [https://github.com/politza/pdf-tools/issues/302]
#+begin_src emacs-lisp
(add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)
#+end_src


*** AucTex is sloooow
Slowness with backspace
#+begin_src emacs-lisp
;; (after! tex-mode
;;   (map-delete sp-pairs 'LaTeX-mode)
;;   (map-delete sp-pairs 'latex-mode)
;;   (map-delete sp-pairs 'tex-mode)
;;   (map-delete sp-pairs 'plain-tex-mode))
#+end_src
** Nomenclature support
I needed "nomenclature" for my thesis... but
AucTex does not automatically support nomencalture so (from [https://tex.stackexchange.com/questions/36582/using-nomenclature-and-emacs])
#+begin_src emacs-lisp
;; nomenclature for latex
;; (eval-after-load "tex"
;;   '(add-to-list 'TeX-command-list
;;                 '("Nomenclature" "makeindex %s.nlo -s nomencl.ist -o %s.nls"
;;                   (lambda (name command file)
;;                     (TeX-run-compile name command file)
;;                     (TeX-process-set-variable file 'TeX-command-next TeX-command-default))
;;                   nil t :help "Create nomenclature file")))
#+end_src

Weird behavior with AucTex (elsewhere?) where creating a double ~''~ replaces
the previous closing bracket with quotes?? (**NB** this does not really work)
#+begin_src emacs-lisp
(setq TeX-quote-after-quote nil)
#+end_src

#+begin_src emacs-lisp
(map!
 :after tex
 :map TeX-mode-map
 :leader
      (:prefix "m"
        :desc "Insert citation" "i"  #'helm-bibtex-with-local-bibliography
        :desc "Reftex citation" "r"  #'reftex-citation
        ;:desc "figlet" "f" #("figlet")
        ;:desc "text" "f f" #'figlet
        ;:desc "comment" "f c" #'figlet-comment
        ))
#+end_src

** Title case for bibtex entries
This is a snippet to convert bibtex entries to Title Case, from
http://kitchingroup.cheme.cmu.edu/blog/2014/10/12/Title-casing-bibtex-entry-journal-titles/

To use, put this at beginning of bibtex file
#+begin_example
% (bibtex-map-entries 'jmax-title-case-article)
#+end_example
Place cursor at line and ~C-x C-e~

#+begin_src emacs-lisp
(defvar jmax-lower-case-words
  '("a" "an" "on" "and" "for"
    "the" "of" "in")
  "List of words to keep lowercase")

(defvar entry-types
  '("article" "journal" "book" "misc" "techreport" "inproceedings" "phdthesis")
  "List of bib entry types")

(defun jmax-title-case-article (&optional key start end)
  "Convert a bibtex entry article title to title-case. The
arguments are optional, and are only there so you can use this
function with `bibtex-map-entries' to change all the title
entries in articles."
  (interactive)
  (bibtex-beginning-of-entry)

  (let* ((title (bibtex-autokey-get-field "title"))
         (words (split-string title))
         (lower-case-words '("a" "an" "on" "and" "for"
                             "the" "of" "in")))
    (when
        ;(string= "article" (downcase (cdr (assoc "=type=" (bibtex-parse-entry)))))
        (-contains? entry-types (downcase (cdr (assoc "=type=" (bibtex-parse-entry)))))
      (setq words (mapcar
                   (lambda (word)
                     (if (or
                          ;; match words containing {} or \ which are probably
                          ;; LaTeX or protected words
                          (string-match "\\$\\|{\\|}\\|\\\\" word)
                          ;; these words should not be capitalized, unless they
                          ;; are the first word
                          (-contains? lower-case-words (s-downcase word)))
                         word
                       (s-capitalize word)))
                   words))

      ;; Check if first word should be capitalized
      (when (-contains? jmax-lower-case-words (car words))
        (setf (car words) (s-capitalize (car words))))

      ;; this is defined in doi-utils
      (bibtex-set-field
       "title"
       (mapconcat 'identity words " "))
      (bibtex-fill-entry))))
#+end_src

** Wordcount
Tex word count with master file (from
[https://superuser.com/questions/125027/word-count-for-latex-within-emacs])
#+begin_src emacs-lisp
(defun latex-word-count-master ()
  (interactive)
  (if (eq TeX-master t)
      (setq master (buffer-file-name))
    (setq master (concat (expand-file-name TeX-master) ".tex")))
  (shell-command (concat "texcount "
                         "-dir "
                         "-unicode "
                         "-inc "
                         master)))
#+end_src

Also seems that AucTex resets the ~delete-selection-mode~
#+begin_src emacs-lisp
;(add-hook 'LaTeX-mode-hook '(lambda () (setq delete-selection-mode t)))
(eval-after-load "tex"
  '(progn
     '(setq delete-selection-mode t)

   '(setq TeX-complete-list
        (append '(
                  ("\\\\refsect{\\([^{}\n
\\%,]*\\)" 1 LaTeX-label-list "}")
                  ) TeX-complete-list))
 '(setq TeX-complete-list
        (append '(
                  ("\\\\refchap{\\([^{}\n
\\%,]*\\)" 1 LaTeX-label-list "}")
                  ) TeX-complete-list))
 '(setq TeX-complete-list
        (append '(
                  ("\\\\refig{\\([^{}\n
\\%,]*\\)" 1 LaTeX-label-list "}")
                  ) TeX-complete-list))
 '(setq TeX-complete-list
        (append '(
                  ("\\\\eqn{\\([^{}\n
\\%,]*\\)" 1 LaTeX-label-list "}")
                  ) TeX-complete-list))
  ))
#+end_src
#+begin_src emacs-lisp
(add-hook 'LaTeX-mode-hook '(lambda () (global-set-key (kbd "C-e") 'move-end-of-line)))
#+end_src


* Coding
#+begin_src emacs-lisp
(setq flycheck-checker-error-threshold 2500)
#+end_src

# *** Ox-Ipynb
# Because I like notebooks but I hate writing them. Loaded in ~init.el~ from [[https://github.com/jkitchin/ox-ipynb]]
# #+begin_src emacs-lisp
# (require 'ox-ipynb)
# #+end_src

** Polymode (disabled)
Overkill since I just really need this for Python/Jupyter source blocks
#+begin_src emacs-lisp
;; (require 'polymode)

;; Define the Python host mode
;; (define-hostmode poly-python-hostmode
;;   :mode 'python-mode)

;; ;; ;; Define the Org inner mode with custom delimiters for %[org and %]
;; ;; (define-innermode poly-org-innermode
;; ;;   :mode 'org-mode
;; ;;   :head-matcher "^[[:space:]]*%\\[org[[:space:]]*$"  ;; Match %[org as the start of the block
;; ;;   :tail-matcher "^[[:space:]]*%\\][[:space:]]*$"     ;; Match %] as the end of the block
;; ;;   :head-mode 'host
;; ;;   :tail-mode 'host
;; ;;   :allow-nested nil  ;; Disable nesting, to avoid complexity
;; ;;   :keep-in-mode t)   ;; Keep the inner block in org-mode for proper fontification

;; ;; Define the Org inner mode with custom delimiters for '''org and '''
;; (define-innermode poly-org-innermode
;;   :mode 'org-mode
;;   :head-matcher "^[[:space:]]*'''org[[:space:]]*$"  ;; Match '''org as the start of the block
;;   :tail-matcher "^[[:space:]]*'''[[:space:]]*$"     ;; Match ''' as the end of the block
;;   :head-mode 'host
;;   :tail-mode 'host
;;   :allow-nested nil  ;; Disable nesting if not needed, it can cause issues
;;   :keep-in-mode t)   ;; Keep the org block in org-mode (for proper highlighting)

;; ;; Define the polymode for Python with Org inner mode
;; (define-polymode poly-python-org-mode
;;   :hostmode 'poly-python-hostmode
;;   :innermodes '(poly-org-innermode))

;; ;; Function to trigger polymode based on content
;; (defun maybe-poly-python-org-mode ()
;;   "Switch to poly-python-org-mode if the buffer contains Org-mode blocks."
;;   (when (save-excursion
;;           (goto-char (point-min))
;;           (re-search-forward "'''org" nil t))  ;; Look for '''org in the buffer
;;     (poly-python-org-mode)))

;; ;; Hook to apply the polymode only when necessary
;; (add-hook 'python-mode-hook #'maybe-poly-python-org-mode)
#+end_src

Polymode runins indentation in Python
#+begin_src emacs-lisp
;; (defun my-disable-org-indent-in-polymode ()
;;   "Disable Org-mode indentation only when in polymode within a Python file."
;;   (when (and (bound-and-true-p polymode-mode)  ;; Check if polymode is active
;;              (eq major-mode 'org-mode)        ;; Check if current mode is Org
;;              (string= (symbol-name (pm-host-chunkmode major-mode))
;;                       "poly-python-hostmode")) ;; Check if host mode is Python
;;     (setq-local org-adapt-indentation nil)    ;; Disable Org indentation
;;     (setq-local org-startup-indented nil)))

;; (add-hook 'org-mode-hook #'my-disable-org-indent-in-polymode)
#+end_src

#+begin_src emacs-lisp
;(use-package! poly-org
;  :after org)
#+end_src

** Additional file extensions
#+begin_src emacs-lisp
; Processing
(add-to-list 'auto-mode-alist '("\\.pde\\'" . java-mode))
#+end_src

** Jupyter-emacs
While limited in some ways, and not much maintained [[https://github.com/nnicandro/emacs-jupyter][emacs jupyter]] is still my favourite way to code Python

Some links in regard:
- https://sqrtminusone.xyz/posts/2021-05-01-org-python/
- [[https://github.com/aahsnr-configs/nix-dots/blob/3d0eaa0b2b591f4a7be43ee4759d9a76f04c60be/modules/home/emacs/doom.d/jupyter-fix.md][Suggetions for setup]]

#+begin_src emacs-lisp
;; (after! org
;;   (setq org-edit-src-content-indentation 0))
#+end_src

#+begin_src emacs-lisp
(use-package jupyter
  :demand t
  :after (:all org python))

; Since update this seems to be necessary?
; https://github.com/emacs-jupyter/jupyter/issues/306
(after! org
        ; (require 'ob-jupyter)
        (org-babel-do-load-languages
        'org-babel-load-languages
        '((emacs-lisp . t)
        (python . t)
        (octave . t)
        (jupyter . t)))
        (setq org-babel-default-header-args:jupyter-python '((:async . "yes")
                                                             (:kernel . "python3")))
)

#+end_src


Also issues when loading, with a need to manually require ~ob-jupyter~ (see ; https://github.com/emacs-jupyter/jupyter/issues/306), but with a very specific ordering. Simply requiring results in a weird break with magit commits (~C-c C-c~ unbound)
#+begin_src emacs-lisp
(after! (:all org python)
  (require 'ob-jupyter)
)
#+end_src

#+begin_src emacs-lisp
(set-popup-rule! "\*jupyter-repl...*" :side 'right :size .50 :vslot 2 :ttl nil :quit nil)
#+end_src
*** Workarounds
**** Corfu + EIN
Jupyter seems use EIN under the hood, which messes with corfu for completion:
#+begin_src emacs-lisp
;; hijacking the completion-at-point-function, allowing lsp-pyright to
;; function as the sole provider for in-buffer completions.
(defadvice! disable-ein-jedi-setup-a (fn)
  "Disable EIN's conflicting jedi setup."
  :around #'ein:jedi-setup
  (interactive))
#+end_src
**** ZMQ issues
Constant errors
#+begin_example
error in process filter: zmq--subprocess-filter: Error in ZMQ subprocess: wrong-type-argument, (user-ptrp nil)
error in process filter: Error in ZMQ subprocess: wrong-type-argument, (user-ptrp nil)
#+end_example

Maybe a solution here?
https://github.com/emacs-jupyter/jupyter/issues/527
#+begin_src emacs-lisp
(setq jupyter-use-zmq nil)

(defun my-jupyter-api-http-request--ignore-login-error-a
    (func url endpoint method &rest data)
  (cond
   ((member endpoint '("login"))
    (ignore-error (jupyter-api-http-error)
      (apply func url endpoint method data)))
   (:else
    (apply func url endpoint method data))))
(advice-add
 #'jupyter-api-http-request
 :around #'my-jupyter-api-http-request--ignore-login-error-a)

#+end_src
**** Unicode bug?
#+begin_src emacs-lisp
(defun delete-non-displayable ()
  "Delete characters not contained in the used fonts and therefore non-displayable."
  (interactive)
  (require 'descr-text) ;; for `describe-char-display'
  (save-excursion
    (goto-char (point-min))
    (while (re-search-forward "[^[:ascii:]]" nil 1)
      (unless (describe-char-display (1- (point)) (char-before))
        (replace-match "")))))
#+end_src

Maybe one day, there will be a way to use Jupyter without crying... Emacs 27 bug
in Jupyter emacs, REPL freezes with (relatively) large code blocks. Workaround
from [[https://github.com/nnicandro/emacs-jupyter/issues/219]], but it removes
fontification from REPL. (seems to be fixed with new version)
#+begin_src emacs-lisp
;; (add-hook 'jupyter-repl-mode-hook
;;           (lambda () (font-lock-mode 0)))
#+end_src
**** More unicode whoes
Still some stuff that does not display correctly
https://github.com/nnicandro/emacs-jupyter/issues/366#issuecomment-985730376
#+begin_src emacs-lisp
(defun display-ansi-colors ()
  (ansi-color-apply-on-region (point-min) (point-max)))

(add-hook 'org-babel-after-execute-hook #'display-ansi-colors)
#+end_src

*** Spyder-like experience
Here I try to tweak emacs jupyter to behave more like [[https://www.spyder-ide.org][Spyder]] (my second favourite).

**** Have the REPL appear on the right
#+begin_src emacs-lisp
(set-popup-rule! "^\\*Python" :side 'right :width 0.5)
#+end_src

**** Code execution
Tell jupyter emacs to send code to repl
#+begin_src emacs-lisp
(setq jupyter-repl-echo-eval-p t)
;(setq conda-anaconda-home "~/opt/miniconda3")
#+end_src

Send code between ~#%%~ pairs or end of file. Stores last executed cell so we can re-execute it
with ~jupyter-execute-last~.
#+begin_src emacs-lisp
(defvar last-executed-cell "")
(defun jupyter-send-cell()
  (interactive)
  (save-excursion
  (if (not (search-backward-regexp "#\s*%%" nil t))
        (python-shell-send-buffer) ;(message "Not in a cell")
      (forward-line)
      (beginning-of-line)
      (set-mark (point))

      (if (not (search-forward-regexp "#\s*%%" nil t))
          (end-of-buffer))
      ;(beginning-of-line)
      (goto-char (point))
      (activate-mark)
      ;(message (buffer-substring (mark) (point)))
      (setq last-executed-cell (buffer-substring (mark) (point)))
      (jupyter-eval-string last-executed-cell)
      (deactivate-mark)
      )))

(defun jupyter-execute-last()
  (interactive)
  (jupyter-eval-string last-executed-cell)
)
#+end_src

I still use ~C-c C-c~ to execute code blocks, although that becomes confusing if having to switch to spyder

Key bindings, see [[https://github.com/lummm/config/blob/909da5468267902277b538970ad851d368ee5a65/emacs/shared/keybindings.emacs][this]].
#+begin_src emacs-lisp
(defun unset-jupyter-keys ()
(define-key jupyter-repl-interaction-mode-map (kbd "C-c C-c") nil))
(add-hook 'jupyter-repl-interaction-mode-hook
          #'unset-jupyter-keys)

(defun jupyter-nb-keybindings()
  (local-set-key (kbd "C-c C-c") 'jupyter-send-cell)
  (local-set-key (kbd "C-c C-x") 'org-babel-remove-result)
)
(add-hook 'jupyter-repl-interaction-mode-hook
          #'jupyter-nb-keybindings)
#+end_src
** Ox-ipynb
#+begin_src emacs-lisp
(use-package! ox-ipynb)
#+end_src

#+BEGIN_SRC emacs-lisp
(add-to-list 'ox-ipynb-kernelspecs
	     '(jupyter-python . (kernelspec . ((display_name . "Python 3")
                                              (language . "python")
                                              (name . "python3")))))

(add-to-list 'ox-ipynb-language-infos
	     '(jupyter-python . (language_info . ((codemirror_mode . ((name . ipython)
								      (version . 3)))
						  (file_extension . ".py")
						  (mimetype . "text/x-python")
						  (name . "python")
						  (nbconvert_exporter . "python")
						  (pygments_lexer . "ipython3")
						  (version . "3.5.2")))))
#+END_SRC

** Javascript
#+begin_src emacs-lisp
(after! rjsx-mode
  (setq js-indent-level 2))
#+end_src

Associate js files with ~js2-mode~ not ~rjsx-mode~
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.js.*$" . js2-mode))
#+end_src

** C++
*** Projectile
Help projectile know where a project is
#+begin_src emacs-lisp
(after! projectile
  (projectile-register-project-type 'cmake '("CMakeLists.txt")
                                  :project-file "CMakeLists.txt"
                                  :compilation-dir "build"
                                  :configure "cmake %s -B %s"
                                  :compile "cmake ..; make -j4"
                                  :test "ctest"
                                  :install "cmake --build . --target install"
                                  :package "cmake --build . --target package")
  )
#+end_src
*** Clangd configuration
Find mac clangd path
#+begin_src emacs-lisp
(if (eq system-type 'darwin)
    (setq lsp-clangd-binary-path "/Library/Developer/CommandLineTools/usr/bin/clangd")
)
#+end_src
And setup lsp to use it
#+begin_src emacs-lisp
(setq lsp-clients-clangd-args '("-j=3"
                                "--background-index"
                                "--clang-tidy"
                                "--completion-style=detailed"
                                "--header-insertion=never"
                                "--header-insertion-decorators=0"))
(after! lsp-clangd (set-lsp-priority! 'clangd 2))
#+end_src

*** LSP settings
#+begin_src emacs-lisp
(use-package lsp-mode
  :config
  (setq lsp-vetur-format-options-tab-size 4)
  ;(setq lsp-vetur-format-enable nil)
  (setq lsp-prompt-projet-root t)
  (setq lsp-auto-guess-root nil)
  (setq lsp-enable-snippet nil)
  ;(add-to-list 'lsp-file-watch-ignored "[/\\\\]\\data")
  ;(add-to-list 'lsp-file-watch-ignored "[/\\\\]\\bin")
)
#+end_src

*** Clang format
Clang format is cool, when you actually use it everywhere. This configuration just activates it if a ~.clang-format~ file is specified in a directory. This is the format I typically use
#+begin_example
---
BasedOnStyle: Google
AlignConsecutiveAssignments: true
AlignConsecutiveDeclarations: true
AlignAfterOpenBracket: true
AlignOperands: true
AllowAllArgumentsOnNextLine: false
BinPackArguments: false
BinPackParameters: false
IndentWidth: 2
ColumnLimit: 0
...
#+end_example
If this is the case, formatting will extend to all subdirectories. To disable it in a specific subdirectoy (e.g. for some dependency), I will crate another ~.clang-forat~ file in the directory:
#+begin_example
{
    "DisableFormat": true,
    "SortIncludes": false
}
#+end_example


#+begin_src emacs-lisp
;; clang-format
(use-package clang-format
	:ensure t
	:bind (("C-c f b" . clang-format-buffer)
				 ("C-c f r" . clang-format-region))
	:hook (before-save . (lambda ()
												 (when (derived-mode-p 'c-mode 'c++-mode)
													 (clang-format-buffer))))
	:custom
	(clang-format-style "file")
	;(clang-format-fallback-style "")
    ;https://zed0.co.uk/clang-format-configurator/
    (clang-format-fallback-style "none")
    )

(setq c-basic-offset 2)
 ;; (clang-format-fallback-style
 ;;         "{BasedOnStyle: google, AlignConsecutiveAssignments: true, BinPackArguments: true, BinPackParameters: true, AlignAfterOpenBracket: true, TabWidth: 4}")
(defun my-c++-mode-hook ()
  (setq indent-tabs-mode t
		tab-width 2
		c-basic-offset 2))
(add-hook 'c++-mode-hook 'my-c++-mode-hook)
#+end_src
** Code formatiing
#+begin_src emacs-lisp
;; (set-formatter! 'ruff '("ruff" "format" "-"))
;; ;(set-formatter! 'latexindent '("latexindent" "-g" "/dev/null"))
(with-eval-after-load 'eglot
   (add-to-list 'eglot-server-programs
                '(python-ts-mode . ("ruff-lsp"))))
#+end_src

** Completion
*** Company
From https://tecosaur.github.io/emacs-config/config.html
#+begin_src emacs-lisp
(after! company
  (setq company-idle-delay 0.1
        company-minimum-prefix-length 2
        company-tooltip-idle-delay 0.5)
  (setq company-show-numbers t)
  (add-hook 'evil-normal-state-entry-hook #'company-abort)
  (setq company-global-modes '(not org-mode))
  ) ;; make aborting less annoying.
#+end_src

*** Cofu

From [[https://github.com/robbert-vdh/dotfiles/blob/282b5393f54ecea91c8ad004cdf417b6e1ad24d2/modules/emacs/doom/config.org#corfu][here]]:
#+begin_src emacs-lisp
(after! vertico
  (setq vertico-count 10))

(after! corfu
  :config
  (setq corfu-auto-resize nil
        corfu-auto-delay 0.2)
  (setq tab-always-indent t)
  (define-key corfu-map [tab] nil)
  (define-key corfu-map "\t" nil)
  )
#+end_src


** Copilot
#+begin_src emacs-lisp
;; accept completion from copilot and fallback to company
(use-package! copilot
  :hook (prog-mode . copilot-mode)
  :bind (:map copilot-completion-map
              ("<tab>" . 'copilot-accept-completion)
              ("TAB" . 'copilot-accept-completion)
              ("C-TAB" . 'copilot-accept-completion-by-word)
              ("C-<tab>" . 'copilot-accept-completion-by-word)))
#+end_src

** DAP MODE (Debugging)
#+begin_src emacs-lisp
(use-package dap-mode
  :init
 (require 'dap-hydra)
 (require 'dap-launch)
 (require 'dap-ui)
 (require 'dap-lldb)
 (dap-mode 1)
 (dap-ui-mode 1)
  (dap-tooltip-mode 1)
  (dap-auto-configure-mode 1)
  (dap-ui-controls-mode 1)
  :hook (dap-stopped . (lambda (arg) (call-interactively #'dap-hydra)))
 :config

 (setq dap-print-io 1)
 (setq dap-lldb-debug-program `(, "/opt/homebrew/opt/llvm/bin/lldb-vscode"))
 (setq dap-auto-configure-features '(sessions locals controls breakpoints expressions repl tooltip))
 )
#+end_src

Some good hints and code below: https://emacs-lsp.github.io/dap-mode/page/how-to/
#+begin_src emacs-lisp
;; -*- lexical-binding: t -*-
(define-minor-mode +dap-running-session-mode
  "A mode for adding keybindings to running sessions"
  nil
  nil
  (make-sparse-keymap)
  (evil-normalize-keymaps) ;; if you use evil, this is necessary to update the keymaps
  ;; The following code adds to the dap-terminated-hook
  ;; so that this minor mode will be deactivated when the debugger finishes
  (when +dap-running-session-mode
    (let ((session-at-creation (dap--cur-active-session-or-die)))
      (add-hook 'dap-terminated-hook
                (lambda (session)
                  (when (eq session session-at-creation)
                    (+dap-running-session-mode -1)))))))

;; Activate this minor mode when dap is initialized
(add-hook 'dap-session-created-hook '+dap-running-session-mode)

;; Activate this minor mode when hitting a breakpoint in another file
(add-hook 'dap-stopped-hook '+dap-running-session-mode)

;; Activate this minor mode when stepping into code in another file
(add-hook 'dap-stack-frame-changed-hook (lambda (session)
                                          (when (dap--session-running session)
                                            (+dap-running-session-mode 1))))
#+end_src

- Other recent hints: https://www.reddit.com/r/emacs/comments/mxiqt6/how_to_setup_and_use_dapmode_for_c/
